Imports System
Imports System.Net
Imports System.Net.Sockets
Imports System.Threading
Imports System.Text

Public Class StateObject
    ' Client socket.  
    Public workSocket As Socket = Nothing
    ' Size of receive buffer.  
    Public Const BufferSize As Integer = 2048
    ' Receive buffer.  
    Public buffer(BufferSize) As Byte
    ' Received data string.  
    Public sb As New StringBuilder
End Class 'StateObject  

Public Class AsynchronousClient : Implements IDisposable
    ' ManualResetEvent instances signal completion.  
    Private connectDone As New ManualResetEvent(False)
    Private sendDone As New ManualResetEvent(False)
    Private receiveDone As New ManualResetEvent(False)

    ' The response from the remote device.  
    Private response As String = String.Empty
    Private _cliente_origen As String = String.Empty

    Public Sub New(cliente_origen As String, servidor As String, puerto As Integer, mensaje As String)
        ' Establece el origen del cliente
        _cliente_origen = cliente_origen

        connectDone.Reset()
        sendDone.Reset()
        receiveDone.Reset()

        ' Create a TCP/IP socket.  
        Dim client As New Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp)

        ' Connect to the remote endpoint.
        client.BeginConnect(servidor, puerto, New AsyncCallback(AddressOf ConnectCallback), client)

        ' Wait for connect.  
        connectDone.WaitOne()

        ' Send test data to the remote device.  
        Send(client, mensaje)
        sendDone.WaitOne()

        'Thread.Sleep(5000) ' Se descomenta para probar sesiones simultaneas y su correcto funcionamiento

        ' Receive the response from the remote device.  
        Receive(client)
        receiveDone.WaitOne()

        ' Release the socket.  
        client.Shutdown(SocketShutdown.Both)
        client.Close()
    End Sub

    ' Public implementation of Dispose pattern callable by consumers.
    Public Sub Dispose() Implements IDisposable.Dispose
        Dispose(True)
        GC.SuppressFinalize(Me)
    End Sub

    ' To detect redundant calls
    Private disposed As Boolean = False

    ' Protected implementation of Dispose pattern.
    Protected Overridable Sub Dispose(disposing As Boolean)
        If disposed Then Return

        If disposing Then
            ' Free any other managed objects here.
            '
        End If

        ' Free any unmanaged objects here.
        '
        disposed = True
    End Sub

    Protected Overrides Sub Finalize()
        Dispose(False)
    End Sub

    Public Function getResponse() As String
        Return response
    End Function

    Private Sub ConnectCallback(ByVal ar As IAsyncResult)
        ' Retrieve the socket from the state object.  
        Dim client As Socket = CType(ar.AsyncState, Socket)

        ' Complete the connection.  
        client.EndConnect(ar)

        ' Signal that the connection has been made.  
        connectDone.Set()
    End Sub 'ConnectCallback  

    Private Sub Receive(ByVal client As Socket)

        ' Create the state object.  
        Dim state As New StateObject
        state.workSocket = client

        ' Begin receiving the data from the remote device.  
        client.BeginReceive(state.buffer, 0, StateObject.BufferSize, 0, New AsyncCallback(AddressOf ReceiveCallback), state)
    End Sub 'Receive  

    Private Sub ReceiveCallback(ByVal ar As IAsyncResult)

        ' Retrieve the state object and the client socket   
        ' from the asynchronous state object.  
        Dim state As StateObject = CType(ar.AsyncState, StateObject)
        Dim client As Socket = state.workSocket

        ' Read data from the remote device.  
        Dim bytesRead As Integer = client.EndReceive(ar)

        If bytesRead > 0 Then
            ' There might be more data, so store the data received so far.  
            state.sb.Append(Encoding.ASCII.GetString(state.buffer, 0, bytesRead))

            ' Get the rest of the data.  
            'client.BeginReceive(state.buffer, 0, StateObject.BufferSize, 0, New AsyncCallback(AddressOf ReceiveCallback), state)
        End If

        ' All the data has arrived; put it in response.  
        If state.sb.Length > 1 Then
            response = state.sb.ToString()
        End If
        ' Signal that all bytes have been received.  
        receiveDone.Set()
    End Sub 'ReceiveCallback  

    Private Sub Send(ByVal client As Socket, ByVal data As String)
        ' Convert the string data to byte data using ASCII encoding.  
        Dim byteData As Byte() = Encoding.ASCII.GetBytes(data)

        ' Begin sending the data to the remote device.  
        client.BeginSend(byteData, 0, byteData.Length, 0, New AsyncCallback(AddressOf SendCallback), client)
    End Sub 'Send  

    Private Sub SendCallback(ByVal ar As IAsyncResult)
        ' Retrieve the socket from the state object.  
        Dim client As Socket = CType(ar.AsyncState, Socket)

        ' Complete sending the data to the remote device.  
        Dim bytesSent As Integer = client.EndSend(ar)

        ' Signal that all bytes have been sent.  
        sendDone.Set()
    End Sub 'SendCallback 
End Class
