using System;
using System.Collections.Generic;

using System.Data;
using System.Data.Common;
using System.Linq;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;

namespace migrac
{

    public class PACS008_MXN
    {

        private const string tipoOperacion = "PACS008_MXN";
        private static T24_MW_Connection.MW_Tipo_operacion goMW_TipoOperacion;

        public static bool procesaOperacion(string icn, Dictionary<string, object> datos)
        {
            string lsAliasProceso;
            bool lbProcesado;
            long llFolioMW;

            // Obtención de los datos de la familia de la operacion
            // goMW_TipoOperacion = T24_MW_Connection.MW_DatosOperacion("SWF_IN")

            write_Log(Operators.ConcatenateObject(Operators.ConcatenateObject("INFO|" + tipoOperacion + ".procesaOperacion|Iniciando el registro de la operación, folio_unico='", datos["folio_unico"]), "'."));

            // Tipo de Operacion
            goMW_TipoOperacion = goT24_Connection.MW_DatosOperacion("SWF_IN");

            // Registro de E/S
            lsAliasProceso = dameUltimoProceso_SWF(goTOMI_Database, icn, gsTipoOperacion);

            // E/S
            if (lsAliasProceso == "TOMI_ENTRADAS/SALIDAS" | lsAliasProceso == "T24_REGISTRO" | lsAliasProceso == "CONCILIAR")
            {
                write_Log("INFO|" + tipoOperacion + ".procesaOperacion|A registrar operación en TOMI.");

                // Inicio el proceso
                iniciaProceso_SWF(goTOMI_Database, icn, gsTipoOperacion, lsAliasProceso);

                if (lsAliasProceso == "TOMI_ENTRADAS/SALIDAS")
                {
                    llFolioMW = 0L;
                    lbProcesado = TOMI_REGISTRO(icn, datos, ref llFolioMW);
                    if (lbProcesado == false & !(gexUltimaExcepcion == null))
                    {
                        throw gexUltimaExcepcion;
                    }

                    if (!lbProcesado)
                    {
                        throw new Exception("Error en procesamiento de registro TOMI_REGISTRO con folio: " + icn);
                    }

                    write_Log("INFO|" + tipoOperacion + ".procesaOperacion|Fin del registro de la operación.");

                    // Actualización de la operación
                    terminaProceso_SWF(goTOMI_Database, icn, gsTipoOperacion, lsAliasProceso);
                }

                // Inicio el proceso
                iniciaProceso_SWF(goTOMI_Database, icn, gsTipoOperacion, "T24_REGISTRO");
                terminaProceso_SWF(goTOMI_Database, icn, gsTipoOperacion, "T24_REGISTRO");

                iniciaProceso_SWF(goTOMI_Database, icn, gsTipoOperacion, "CONCILIAR");
                terminaProceso_SWF(goTOMI_Database, icn, gsTipoOperacion, "CONCILIAR");

                // Marca la operación como finalizada total
                migrac.Comunes.marca_op_terminada(icn, "PROC", "JEAI");

                // Siguiente proceso
                lsAliasProceso = "";
            }

            // Termina el proceso del folio
            return true;
        }

        private static bool TOMI_REGISTRO(string icn, Dictionary<string, object> datos, ref long folioMW)
        {
            try
            {
                DataTable lrsDatos_T24;
                DbDataReader lrsDatos_TOMI;
                DbCommand loCmd_TOMI;
                string lsCuentaCompletaVostro;
                string[] laCuentaSeparadaVostro;
                int liTipoAppAnterior;
                string lsTipoOpDesc;
                string lsDetailCharges;
                bool lbCuentaT24;
                string lsNumeroCliente;
                string lsNombreCliente;
                string lsNombreCuenta;
                string lsCuentaPrincipal;
                string lsCuentaComisiones;
                string lsBeneficiario;
                string lsDescripcion;
                bool lbRegistro;
                string lsNombreBancoBene;
                int liSalida;
                long llFolioRegreso;
                string lsSQL;

                // Inicio de variables
                lsNumeroCliente = string.Empty;
                lsNombreCliente = string.Empty;
                lsNombreCuenta = string.Empty;

                // Datos del registro
                lsBeneficiario = Strings.Trim(busca_valor_xml(datos["des_variables_xml"], "beneficiary_name_addr"));
                if (string.IsNullOrEmpty(lsBeneficiario))
                {
                    lsBeneficiario = Strings.Trim(busca_valor_xml(datos["des_variables_xml"], "beneficiary_name_addr_1"));
                }
                if (lsBeneficiario.Length > 100)
                {
                    lsBeneficiario = lsBeneficiario.Substring(0, 100);
                }
                lsCuentaCompletaVostro = busca_valor_xml(datos["des_variables_xml"], "btmum_cta_vostro_emisor");
                laCuentaSeparadaVostro = lsCuentaCompletaVostro.Split("-");
                lsCuentaPrincipal = laCuentaSeparadaVostro[2];
                lsCuentaComisiones = lsCuentaPrincipal;
                lsDescripcion = busca_valor_xml(datos["des_variables_xml"], "remmitance_information");     // Descripción
                lsDetailCharges = busca_valor_xml(datos["des_variables_xml"], "detail_charges");

                // Datos de la cuenta en T24
                lbCuentaT24 = false;
                lrsDatos_T24 = goT24_Connection.datos_cuenta_VW(lsCuentaPrincipal);
                if (lrsDatos_T24.Rows.Count > 0)
                {
                    lsNumeroCliente = Conversions.ToString(lrsDatos_T24.AsEnumerable().ElementAtOrDefault(0)["CUSTOMER"]);  // CUSTOMER_CODE
                    lsNombreCliente = Conversions.ToString(lrsDatos_T24.AsEnumerable().ElementAtOrDefault(0)["NAME_1"]);
                    lsNombreCuenta = Conversions.ToString(lrsDatos_T24.AsEnumerable().ElementAtOrDefault(0)["ACCOUNT_TITLE_1"]);
                    lbCuentaT24 = true;
                }
                lrsDatos_T24.Dispose();

                if (!lbCuentaT24)
                {
                    throw new Exception("No se encontró o está inactiva la cuenta en T24 '" + lsCuentaPrincipal + "'");
                }

                // Valido las comisiones o tipo de operacion
                if (busca_valor_xml(datos["des_variables_xml"], "btmum_cve_swift_emisor") == "BOTKUS33")
                {
                    // Es NY
                    if (lsDetailCharges == "OUR")
                    {
                        write_Log("INFO|" + tipoOperacion + ".TOMI_REGISTRO|Es registro de NY, swift='BOTKUS33' y DetailCharges='OUR'.");
                        liTipoAppAnterior = 804;           // TRF ENVIADA MXN SPEI, COMISION USD
                        lsTipoOpDesc = "TRF ENVIADA MXN SPEI (COM USD)";
                    }
                    else
                    {
                        write_Log("INFO|" + tipoOperacion + ".TOMI_REGISTRO|BTMU NY, comisión diferente a OUR.");
                        liTipoAppAnterior = 800;           // TRF ENVIADA MXN SPEI
                        lsTipoOpDesc = "TRF ENVIADA MXN SPEI";
                    }
                }
                else
                {
                    // No es NY
                    write_Log("INFO|" + tipoOperacion + ".TOMI_REGISTRO|Subaplicación 800.");
                    if (lsDetailCharges == "OUR")
                    {
                        write_Log("INFO|" + tipoOperacion + ".TOMI_REGISTRO|No es NY, comisión OUR.");
                        liTipoAppAnterior = 800;           // TRF ENVIADA MXN SPEI
                        lsTipoOpDesc = "TRF ENVIADA MXN SPEI";
                    }
                    else
                    {
                        write_Log("INFO|" + tipoOperacion + ".TOMI_REGISTRO|No es NY, comisión diferente a OUR.");
                        liTipoAppAnterior = 800;           // TRF ENVIADA MXN SPEI
                        lsTipoOpDesc = "TRF ENVIADA MXN SPEI";
                    }
                }

                write_Log("INFO|" + tipoOperacion + ".TOMI_REGISTRO|Inicia registro en base de TOIMI con llamado 'usp_TOMBIN_INSERT_FORMATO_FXD_LOCAL'.");

                write_Log("INFO|" + tipoOperacion + ".TOMI_REGISTRO|T24_CUSTOMER_CODE='" + lsNumeroCliente + "'.");
                write_Log(Operators.ConcatenateObject(Operators.ConcatenateObject("INFO|" + tipoOperacion + ".TOMI_REGISTRO|A buscar el nombre del banco para la cuenta CLABE '", datos["num_cuenta"]), "'."));
                lsNombreBancoBene = migrac.Comunes.dame_banco(Conversions.ToString(datos["num_cuenta"]));
                write_Log("INFO|" + tipoOperacion + ".TOMI_REGISTRO|Banco='" + lsNombreBancoBene + "'.");

                if (string.IsNullOrEmpty(lsNombreBancoBene))
                {
                    // El banco beneficiario no existe
                    throw new Exception(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("El banco asociado a la cuenta ", datos["num_cuenta"]), " no existe")));
                }

                bool activeAutomation = AutomationIsActive();
                // Inserción de la operacion en TOMI
                goTOMI_Database.BeginTransaction("MT103_FXD_Local");

                // Genero FXD_Local
                loCmd_TOMI = goTOMI_Database.newCommand_Transaction("usp_TOMBIN_INSERT_FORMATO_FXD_LOCAL");
                loCmd_TOMI.CommandType = CommandType.StoredProcedure;
                // Definición de parámetros
                loCmd_TOMI.Parameters.Clear();

                string status = activeAutomation ? Conversions.ToBoolean(Operators.ConditionalCompareObjectLessEqual(Strings.Replace(Strings.Format(DateTime.Now.Date, "yyyy-MM-dd"), "-", ""), datos["fec_valor"], false)) ? "SCNP" : "CONF" : "PEND";

                goTOMI_Database.AddParameter(loCmd_TOMI, "@NF_FOLIO_UNICO", datos["folio_unico"], DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@NF_TIPO", "FXD", DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@NF_FOLIO", DBNull.Value, DbType.Int32);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@T24_CUSTOMER_CODE", lsNumeroCliente, DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@T24_DEBIT_ACCT_NO", lsCuentaPrincipal, DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@NF_ESTATUS", status, DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@NF_USUARIO_CAPTURA", "JEAI", DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@NF_USUARIO_AUTORIZA", Interaction.IIf(activeAutomation, "TOMI", DBNull.Value), DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@NF_FECHA_CAPTURA", DateTime.Now.Date, DbType.DateTime);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@NF_FECHA_AUTORIZA", Interaction.IIf(activeAutomation, DateTime.Now.Date, DBNull.Value), DbType.DateTime);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@T24_DEBIT_AMOUNT", datos["des_importe"], DbType.Decimal);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@T24_SHORT_NAME", lsNombreCliente, DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@NF_FOREX_RELACIONADO", "", DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@T24_DEBIT_CURRENCY", goT24_Connection.MonedaDefaultMN, DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@NF_BANCO_BENEF", lsNombreBancoBene, DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@T24_BEN_ACCT_NO", datos["num_cuenta"], DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@NF_TIPO_CUENTA", "CUENTA DE CHEQUES(CLABE)", DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@T24_BEN_CUST_NAME", lsBeneficiario, DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@NF_RFC_BENEFICIARIO", DBNull.Value, DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@NF_TASA_RETENCION", DBNull.Value, DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@NF_FECHA_EJECUCION", datos["fec_valor"], DbType.Int32);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@T24_DEBIT_THEIR_REF", icn, DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@NF_MONTO_ENVIAR", datos["des_importe"], DbType.Decimal);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@ID_PLANTILLA", DBNull.Value, DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@ID_FORMATO_PLANTILLA", DBNull.Value, DbType.Int64);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@Salida", 0, DbType.Int16, default, ParameterDirection.Output);
                // Termina Definición de parámetros y hace el llamado
                write_Log("INFO|" + tipoOperacion + ".TOMI_REGISTRO|usp_TOMBIN_INSERT_FORMATO_FXD_LOCAL pasaron parametros, inicia ejecución.");
                liSalida = -1;
                llFolioRegreso = 0L;
                lrsDatos_TOMI = loCmd_TOMI.ExecuteReader();
                if (!(lrsDatos_TOMI == null))
                {
                    while (lrsDatos_TOMI.Read())
                        llFolioRegreso = Conversions.ToLong(lrsDatos_TOMI[0]);
                    lrsDatos_TOMI.Close();
                    lrsDatos_TOMI = null;
                }
                liSalida = Conversions.ToInteger(loCmd_TOMI.Parameters["@Salida"].Value);
                loCmd_TOMI = null;
                write_Log("INFO|" + tipoOperacion + ".TOMI_REGISTRO|Paso la ejecución, Salida=" + liSalida + ", folioRegreso=" + llFolioRegreso + ".");

                // Regreso la salida
                if (liSalida != 0 | llFolioRegreso == 0L)
                {
                    throw new Exception("No se pudo registrar la operación como FXD_Local");
                }

                // Actualización de datos de la operación
                lsSQL = "UPDATE tb_tombin_nf_fxd_local SET nf_charge=" + textoSQL(lsDetailCharges) + " WHERE nf_folio=" + llFolioRegreso + ";" + Constants.vbCrLf + "UPDATE tb_srv_swf_trabajo SET mw_trx_id='" + llFolioRegreso + "' WHERE nf_tipo='SWIFT_IN' AND nf_folio='" + icn + "';";
                goTOMI_Database.Execute_Command_Transaction(lsSQL);

                // Registro de la Entrada/Salida
                var loDatos_E_S = new Dictionary<string, object>();
                // Datos de referencia
                loDatos_E_S.Add("icn", icn);
                // Datos
                loDatos_E_S.Add("referencia", datos["folio_unico"]);
                loDatos_E_S.Add("num_cliente", lsNumeroCliente);
                loDatos_E_S.Add("ordenante", lsNombreCliente);
                loDatos_E_S.Add("operacion", 218);
                loDatos_E_S.Add("operacion_desc", "Salida (TTS)");
                loDatos_E_S.Add("tipo", "D");
                loDatos_E_S.Add("tipo_desc", "Doméstica");
                loDatos_E_S.Add("cuenta", lsCuentaPrincipal);
                loDatos_E_S.Add("nombre", lsNombreCuenta);
                loDatos_E_S.Add("moneda", goT24_Connection.MonedaDefaultMN);
                loDatos_E_S.Add("via", liTipoAppAnterior); // Subaplicacion
                loDatos_E_S.Add("via_desc", lsTipoOpDesc);
                loDatos_E_S.Add("importe", datos["des_importe"]);
                loDatos_E_S.Add("saldo", 0);
                loDatos_E_S.Add("comentarios", "");
                loDatos_E_S.Add("fec_captura", Strings.Format(DateTime.Now.Date, "yyyy-MM-dd"));
                loDatos_E_S.Add("fec_valor", gsFechaSistema.Substring(0, 4) + "-" + gsFechaSistema.Substring(4, 2) + "-" + gsFechaSistema.Substring(6, 2));
                loDatos_E_S.Add("hora", Strings.Format(DateTime.Now.Date, "hh:mm:ss AMPM"));
                loDatos_E_S.Add("capturista", "JEAI");
                loDatos_E_S.Add("fad", 0);
                loDatos_E_S.Add("ref_control", "");
                loDatos_E_S.Add("ref_control_cont", 0);
                lbRegistro = migrac.Comunes.Registra_E_S(ref loDatos_E_S, true);
                if (!lbRegistro)
                {
                    throw new Exception("No se pudo registrar la operación como entrada/salida");
                }

                // Folio del MW
                folioMW = llFolioRegreso;

                goTOMI_Database.Commit_Transaction();
                return true;
            }
            catch (Exception lexTOMI_REGISTRO)
            {
                write_Log("ERROR|" + tipoOperacion + ".TOMI_REGISTRO|Se presenta exception: " + lexTOMI_REGISTRO.ToString());
                gexUltimaExcepcion = lexTOMI_REGISTRO;
                if (!(goTOMI_Database == null))
                {
                    goTOMI_Database.Rollback_Transaction();
                }
                // inserta_alerta(Nothing, Nothing, gsNombre_Servicio, "ERROR", lexInterfase_Giros.ToString, giPID, gsProcessName, lexInterfase_Giros, goTOMI_Database)
            }
            return false;
        }

        private static bool AutomationIsActive()
        {
            var cmd = goTOMI_Database.Execute_Query("SELECT op_automatica FROM tb_srv_swf_automation_control where tipo_operacion='SWIFT_IN' AND cve_mensaje='PACS008' AND message_category_id=4");
            bool automaticOp = false;
            if (!(cmd == null))
            {
                while (cmd.Read)
                    automaticOp = cmd("op_automatica");
                cmd.Close();
            }
            return automaticOp;
        }
    }
}
