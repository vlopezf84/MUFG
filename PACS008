using System;
using System.Collections.Generic;

using System.Data.Common;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;

namespace migrac
{

    public partial class PACS008
    {
        private const string tipoOperacion = "PACS008";
        private static T24_MW_Connection.MW_Tipo_operacion goMW_TipoOperacion;

        public static bool procesaOperacion(string icn, Dictionary<string, object> datos)
        {
            string lsAliasProceso;
            bool lbProcesado;

            write_Log(Operators.ConcatenateObject(Operators.ConcatenateObject("INFO|" + tipoOperacion + ".procesaOperacion|Iniciando el registro de la operación, folio_unico='", datos["folio_unico"]), "'."));

            // Tipo de Operacion
            goMW_TipoOperacion = goT24_Connection.MW_DatosOperacion("SWF_IN");

            // Proceso a ejecutar
            lsAliasProceso = dameUltimoProceso_SWF(goTOMI_Database, icn, gsTipoOperacion);

            // E/S
            if (lsAliasProceso == "TOMI_ENTRADAS/SALIDAS")
            {
                write_Log("INFO|" + tipoOperacion + ".procesaOperacion|A realizar el registro de E/S.");

                // Inicio el proceso
                iniciaProceso_SWF(goTOMI_Database, icn, gsTipoOperacion, lsAliasProceso);

                // Entrada salida
                var loDatos_E_S = new Dictionary<string, object>();
                bool lbRegistro;

                // Datos de referencia
                loDatos_E_S.Add("icn", icn);
                // Datos
                loDatos_E_S.Add("referencia", datos["folio_unico"]);
                loDatos_E_S.Add("num_cliente", datos["num_cliente"]);
                loDatos_E_S.Add("ordenante", datos["nombre_cliente"]);
                loDatos_E_S.Add("operacion", 218);
                loDatos_E_S.Add("operacion_desc", "Entrada (TTS)");
                loDatos_E_S.Add("tipo", "I");
                loDatos_E_S.Add("tipo_desc", "Internacional");
                loDatos_E_S.Add("cuenta", datos["num_cuenta"]);
                loDatos_E_S.Add("nombre", datos["nombre_cliente"]);
                loDatos_E_S.Add("moneda", goT24_Connection.valida_moneda(datos["cve_moneda"]));
                loDatos_E_S.Add("via", 810); // Subaplicacion
                loDatos_E_S.Add("via_desc", "TRF RECIBIDA");
                loDatos_E_S.Add("importe", datos["des_importe"]);
                loDatos_E_S.Add("saldo", 0);
                loDatos_E_S.Add("comentarios", "");
                loDatos_E_S.Add("fec_captura", Strings.Format(DateTime.Now, "yyyy-MM-dd"));
                loDatos_E_S.Add("fec_valor", gsFechaSistema.Substring(0, 4) + "-" + gsFechaSistema.Substring(4, 2) + "-" + gsFechaSistema.Substring(6, 2));
                loDatos_E_S.Add("hora", Strings.Format(DateTime.Now, "hh:mm:ss AMPM"));
                loDatos_E_S.Add("capturista", "JEAI");
                loDatos_E_S.Add("fad", 0);
                loDatos_E_S.Add("ref_control", "");
                loDatos_E_S.Add("ref_control_cont", 0);
                lbRegistro = migrac.Comunes.Registra_E_S(ref loDatos_E_S);
                if (!lbRegistro)
                {
                    throw new Exception("No se pudo registrar la operación como entrada/salida");
                }

                write_Log("INFO|" + tipoOperacion + ".procesaOperacion|Se realizó el registro de E/S exitosamente.");

                // Actualización de la operación
                terminaProceso_SWF(goTOMI_Database, icn, gsTipoOperacion, lsAliasProceso);

                write_Log("INFO|" + tipoOperacion + ".procesaOperacion|Se termina el registro E/S e inicia siguiente tarea.");

                // Siguiente proceso
                lsAliasProceso = dameUltimoProceso_SWF(goTOMI_Database, icn, gsTipoOperacion);
            }

            // ' Registro de la operación en T24
            if (lsAliasProceso == "T24_REGISTRO")
            {
                write_Log("INFO|" + tipoOperacion + ".procesaOperacion|A registrar operación en T24.");

                // Inicio el proceso
                iniciaProceso_SWF(goTOMI_Database, icn, gsTipoOperacion, lsAliasProceso);

                // Operacion a T24
                if (migrac.Comunes.ReintentoPermitidoSWF_MX(tipoOperacion, icn))
                {
                    lbProcesado = T24_REGISTRO(icn, datos);
                    if (lbProcesado == false & !(gexUltimaExcepcion == null))
                    {
                        throw gexUltimaExcepcion;
                    }

                    if (!lbProcesado)
                    {
                        throw new Exception("Error en procesamiento de registro PACS008 T24_REGISTRO con folio: " + icn);
                    }
                }
            }


            // Conciliación
            if (lsAliasProceso == "CONCILIAR")
            {
                string lsFolioT24 = string.Empty;
                bool lbEs_Igual_en_T24;
                string lsMoneda;
                string lsCuentaDeb;
                string lsCuentaCred;
                DbDataReader lrsDatos;

                write_Log("INFO|" + tipoOperacion + ".procesaOperacion|A conciliar operaciones (por estatus) entre TOMI y T24.");

                iniciaProceso_SWF(goTOMI_Database, icn, gsTipoOperacion, lsAliasProceso);

                // Busco la operacion en T24
                lrsDatos = goTOMI_Database.Execute_Query(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT T24_TRANSACTION_ID FROM TB_SRV_SWF_TRABAJO_MX WHERE NF_FOLIO_UNICO = '", datos["folio_unico"]), "'"));
                if (!(lrsDatos == null))
                {
                    while (lrsDatos.Read())
                    {
                        if (!(lrsDatos["T24_TRANSACTION_ID"] is DBNull))
                        {
                            lsFolioT24 = lrsDatos["T24_TRANSACTION_ID"].ToString();
                        }
                    }
                    lrsDatos.Close();
                    lrsDatos = null;
                }

                if (lsFolioT24 == null)
                {
                    throw new Exception(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("No existe folio asignado para el folio_unico='", datos["folio_unico"]), "'")));
                }

                // Valida contra los datos de TOMI - T24
                lbEs_Igual_en_T24 = false;
                lsMoneda = goT24_Connection.valida_moneda(datos["cve_moneda"]);
                if (lsMoneda == goT24_Connection.MonedaDefaultMN)
                {
                    lsCuentaDeb = Strings.Right(Conversions.ToString(datos["cta_vostro_emisor"]), 7);
                    lsCuentaCred = Conversions.ToString(datos["num_cuenta"]);
                    if (lsCuentaCred.Length == 7)
                    {
                        lsCuentaCred = lsCuentaCred;
                    }
                    else if (Conversions.ToDouble(lsCuentaCred) == 18d)
                    {
                        lsCuentaCred = lsCuentaCred.Substring(11, 7);
                    }
                    else
                    {
                        throw new Exception("La cuenta a acreditar no es válida");
                    }
                }
                else
                {
                    lsCuentaDeb = busca_valor_xml(datos["des_variables_xml"], "debit_account");
                    lsCuentaCred = Conversions.ToString(datos["num_cuenta"]);
                }
                lrsDatos = goVistasT24_Database.Execute_Query("SELECT CUR_ID,DEBIT_ACCT_NO,DEBIT_CURRENCY,DEBIT_AMOUNT,CREDIT_ACCT_NO,SATEL_SYS_REF FROM VW_T24_FUNDS_TRANSFER_ID WHERE CUR_ID = '" + lsFolioT24 + "'");
                if (!(lrsDatos == null))
                {
                    while (lrsDatos.Read())
                    {
                        if (Conversions.ToBoolean(Operators.AndObject(Operators.AndObject(Operators.AndObject(Operators.AndObject(Operators.AndObject(Operators.ConditionalCompareObjectEqual(lsFolioT24, lrsDatos["CUR_ID"], false), Operators.ConditionalCompareObjectEqual(datos["folio_unico"], lrsDatos["SATEL_SYS_REF"], false)), Operators.ConditionalCompareObjectEqual(datos["des_importe"], lrsDatos["DEBIT_AMOUNT"], false)), Operators.ConditionalCompareObjectEqual(lsMoneda, lrsDatos["DEBIT_CURRENCY"], false)), Operators.ConditionalCompareObjectEqual(lsCuentaDeb, lrsDatos["DEBIT_ACCT_NO"], false)), Operators.ConditionalCompareObjectEqual(lsCuentaCred, lrsDatos["CREDIT_ACCT_NO"], false))))
                        {
                            lbEs_Igual_en_T24 = true;
                        }
                    }
                    lrsDatos.Close();
                    lrsDatos = null;
                }

                if (!lbEs_Igual_en_T24)
                {
                    throw new Exception("Los datos de conciliación entre TOMI y T24 son diferentes");
                }
                write_Log("INFO|" + tipoOperacion + ".procesaOperacion|Conciliación exitosa");

                // Actualizo el estatus
                terminaProceso_SWF(goTOMI_Database, icn, gsTipoOperacion, lsAliasProceso);

                // Marca la operación como finalizada total
                migrac.Comunes.marca_op_terminada(icn, "PROC", "JEAI");

                // Verificamos la última operación no realizada
                lsAliasProceso = "";
            }

            write_Log("INFO|" + tipoOperacion + ".procesaOperacion|Fin del registro de la operación.");

            // Termina el proceso del folio
            return true;
        }

        // Inserta registro en T24
        private static bool T24_REGISTRO(string icn, Dictionary<string, object> datos)
        {
            try
            {
                T24_MW_TrxMaster loTrxMaster = default;
                T24_MW_TrxDetail loTrxDetailFT = default;
                string lsT24_Internal_Type;
                // Dim lsDireccion As String, lsCuenta As String
                string lsMoneda;
                string lsDescripcion;
                string lsDetailCharges;
                string lsOrderingBank;
                string lsCIF_Inst_Ordenante;
                string lsSwiftInstOrdenante;
                string lsNombreInstOrdenante;
                string lsDireccionInstOrdenante;
                string lsBeneficiario;
                string lsCuentaDeb;
                string lsCuentaCred;
                string lsOrderingCust = string.Empty;
                string lsSW_END2END_REF;
                string lsSLA_UETR;

                write_Log("INFO|" + tipoOperacion + ".T24_REGISTRO|Inicia registro en T24.");

                // Asignacion de Valores
                lsMoneda = goT24_Connection.valida_moneda(datos["cve_moneda"]);
                lsSwiftInstOrdenante = "";
                lsNombreInstOrdenante = "";
                lsDireccionInstOrdenante = "";
                // Datos de la institución ordenante
                lsNombreInstOrdenante = busca_valor_xml(datos["des_variables_xml"], "order_inst_name_addr_1");
                if (!string.IsNullOrEmpty(lsNombreInstOrdenante))
                {
                    lsDireccionInstOrdenante = busca_valor_xml(datos["des_variables_xml"], "order_inst_name_addr_2") + " " + busca_valor_xml(datos["des_variables_xml"], "order_inst_name_addr_3");
                    lsSwiftInstOrdenante = busca_valor_xml(datos["des_variables_xml"], "order_inst_party");
                    // Corto los campos
                    lsNombreInstOrdenante = migrac.Comunes.quita_linea(lsNombreInstOrdenante, 50);
                    lsDireccionInstOrdenante = migrac.Comunes.quita_linea(lsDireccionInstOrdenante, 80);
                    write_Log("INFO|" + tipoOperacion + ".T24_REGISTRO|Se encontró la información del ordenante por institución ordenante.");
                }
                else
                {
                    // No hay banco ordenante, busco el cif ordenante
                    lsCIF_Inst_Ordenante = busca_valor_xml(datos["des_variables_xml"], "order_inst_cif");
                    if (!string.IsNullOrEmpty(lsCIF_Inst_Ordenante))
                    {
                        // Busca los valores
                        migrac.Comunes.busca_cif_datos(lsCIF_Inst_Ordenante, ref lsSwiftInstOrdenante, ref lsNombreInstOrdenante, ref lsDireccionInstOrdenante);
                        lsNombreInstOrdenante = migrac.Comunes.quita_linea(lsNombreInstOrdenante, 50);
                        lsDireccionInstOrdenante = migrac.Comunes.quita_linea(lsDireccionInstOrdenante, 80);
                        write_Log("INFO|" + tipoOperacion + ".T24_REGISTRO|Encontró: Swift='" + lsSwiftInstOrdenante + "', Nombre='" + lsNombreInstOrdenante + "', Calle='" + lsDireccionInstOrdenante + "'.");
                    }
                    else
                    {
                        write_Log("INFO|" + tipoOperacion + ".T24_REGISTRO|No se encontró el cif de la institución ordenante ewn el catálogo.");
                    }
                }
                // Armado de la descricpión
                lsDescripcion = "RECEPCION TRANSFERENCIA INTERNACIONAL PACS008.";
                if (!string.IsNullOrEmpty(lsNombreInstOrdenante))
                {
                    lsDescripcion += ", BANCO ORDENANTE: " + busca_valor_xml(datos["des_variables_xml"], "order_inst_name");
                }
                else if (busca_valor_xml(datos["des_variables_xml"], "btmum_nombre_emisor") != "")
                {
                    lsDescripcion += ", BANCO ORIGEN: " + busca_valor_xml(datos["des_variables_xml"], "btmum_nombre_emisor");
                }
                if (busca_valor_xml(datos["des_variables_xml"], "ordering_name_addr_1") != "")
                {
                    lsDescripcion += ", ORDENANTE: " + busca_valor_xml(datos["des_variables_xml"], "ordering_name");
                }
                if (busca_valor_xml(datos["des_variables_xml"], "detail_charges") != "")
                {
                    lsDescripcion += ", DET. CHARGES: " + busca_valor_xml(datos["des_variables_xml"], "detail_charges");
                }
                if (busca_valor_xml(datos["des_variables_xml"], "remmitance_information") != "")
                {
                    lsDescripcion += ", POR CONCEPTO DE: " + busca_valor_xml(datos["des_variables_xml"], "remmitance_information");
                }

                // Es OUR?
                lsDetailCharges = busca_valor_xml(datos["des_variables_xml"], "detail_charges");
                if (lsDetailCharges == "OUR")
                {
                    // Sin comisión
                    write_Log("INFO|" + tipoOperacion + ".T24_REGISTRO|Es registro con DetailCharges='OUR' (sin comisiones).");
                    lsT24_Internal_Type = "PACS008";
                    lsOrderingBank = busca_valor_xml(datos["des_variables_xml"], "btmum_cve_swift_emisor");
                }
                else
                {
                    // Comisiones
                    write_Log("INFO|" + tipoOperacion + ".T24_REGISTRO|Inicia busqueda de comisiones.");
                    lsT24_Internal_Type = "PACS008_COM";
                    lsOrderingBank = busca_valor_xml(datos["des_variables_xml"], "btmum_cve_swift_emisor");
                }

                loTrxMaster = new T24_MW_TrxMaster();
                loTrxMaster.TrxOperation_Specific_Type = "SWF_IN";
                loTrxMaster.TrxOperation_SubType = lsT24_Internal_Type;
                loTrxMaster.TrxOperation_Folio = icn;
                loTrxMaster.TrxOperation_Acct = datos["num_cuenta"];
                loTrxDetailFT = new T24_MW_TrxDetail();
                if (lsMoneda == goT24_Connection.MonedaDefaultMN)
                {
                    lsCuentaDeb = Strings.Right(Conversions.ToString(datos["cta_vostro_emisor"]), 7);
                    lsCuentaCred = Conversions.ToString(datos["num_cuenta"]);
                    if (lsCuentaCred.Length == 7)
                    {
                        lsCuentaCred = lsCuentaCred;
                    }
                    else if (Conversions.ToDouble(lsCuentaCred) == 18d)
                    {
                        lsCuentaCred = lsCuentaCred.Substring(11, 7);
                    }
                    else
                    {
                        throw new Exception("La cuenta a acreditar no es válida");
                    }
                }
                else
                {
                    lsCuentaDeb = busca_valor_xml(datos["des_variables_xml"], "debit_account");
                    lsCuentaCred = Conversions.ToString(datos["num_cuenta"]);
                }
                loTrxDetailFT.debit_acct_no = lsCuentaDeb;
                loTrxDetailFT.debit_currency = lsMoneda;
                loTrxDetailFT.debit_amount = string.Format("{0:0.##}", datos["des_importe"]);
                loTrxDetailFT.debit_their_ref = busca_valor_xml(datos["des_variables_xml"], "sender_reference");
                loTrxDetailFT.credit_their_ref = busca_valor_xml(datos["des_variables_xml"], "sender_reference");
                loTrxDetailFT.credit_acct_no = lsCuentaCred;
                loTrxDetailFT.credit_currency = lsMoneda;
                // .credit_amount = lrsDatos.Item("nf_monto_enviar")
                loTrxDetailFT.ben_our_charges = lsDetailCharges;
                loTrxDetailFT.ordering_bank = lsOrderingBank;
                // Beneficiario
                lsBeneficiario = busca_valor_xml(datos["des_variables_xml"], "beneficiary_name_addr");
                if (string.IsNullOrEmpty(lsBeneficiario))
                {
                    lsBeneficiario = busca_valor_xml(datos["des_variables_xml"], "beneficiary_name_addr_1");
                }
                loTrxDetailFT.Beneficiary_Name = lsBeneficiario;
                // Información del ordenante

                lsOrderingCust = Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject(Operators.ConcatenateObject("AC", Interaction.IIf(string.IsNullOrEmpty(Strings.LTrim(Strings.RTrim(busca_valor_xml(datos["des_variables_xml"], "ordering_account")))), "", Strings.LTrim(Strings.RTrim(busca_valor_xml(datos["des_variables_xml"], "ordering_account"))))), Interaction.IIf(string.IsNullOrEmpty(Strings.LTrim(Strings.RTrim(busca_valor_xml(datos["des_variables_xml"], "ordering_name_addr_1")))), "", goT24_Connection.MW_SeparadorMultivalor + Strings.LTrim(Strings.RTrim(busca_valor_xml(datos["des_variables_xml"], "ordering_name_addr_1"))))), Interaction.IIf(string.IsNullOrEmpty(Strings.LTrim(Strings.RTrim(busca_valor_xml(datos["des_variables_xml"], "ordering_name_addr_2")))), "", goT24_Connection.MW_SeparadorMultivalor + Strings.LTrim(Strings.RTrim(busca_valor_xml(datos["des_variables_xml"], "ordering_name_addr_2"))))), Interaction.IIf(string.IsNullOrEmpty(Strings.LTrim(Strings.RTrim(busca_valor_xml(datos["des_variables_xml"], "ordering_name_addr_3")))), "", goT24_Connection.MW_SeparadorMultivalor + Strings.LTrim(Strings.RTrim(busca_valor_xml(datos["des_variables_xml"], "ordering_name_addr_3"))))));

                loTrxDetailFT.ordering_cust = Interaction.IIf(lsOrderingCust.Substring(lsOrderingCust.Length - 1, 1) == goT24_Connection.MW_SeparadorMultivalor, Strings.Mid(lsOrderingCust, 1, lsOrderingCust.Length - 1), lsOrderingCust);

                // Datos de la institución ordenante
                lsCIF_Inst_Ordenante = busca_valor_xml(datos["des_variables_xml"], "order_inst_cif");
                write_Log("INFO|" + tipoOperacion + ".T24_REGISTRO|Buscando datos de la institución ordenante en el catálogo, cif='" + lsCIF_Inst_Ordenante + "'.");
                if (!string.IsNullOrEmpty(lsNombreInstOrdenante))
                {
                    write_Log("INFO|" + tipoOperacion + ".T24_REGISTRO|Encontró: Swift='" + lsSwiftInstOrdenante + "', Nombre='" + lsNombreInstOrdenante + "', Calle='" + lsDireccionInstOrdenante + "'.");
                    loTrxDetailFT.Cust_Ref1 = lsNombreInstOrdenante;
                    loTrxDetailFT.Cust_Ref2 = lsSwiftInstOrdenante;
                    loTrxDetailFT.Cust_Ref3 = lsCIF_Inst_Ordenante;
                }
                else
                {
                    write_Log("INFO|" + tipoOperacion + ".T24_REGISTRO|No se encontró el cif de la institución ordenante ewn el catálogo.");
                }

                loTrxDetailFT.related_ref = busca_valor_xml(datos["des_variables_xml"], "sender_reference");
                loTrxDetailFT.Instructions = lsDescripcion;
                loTrxDetailFT.Satel_Sys_Ref = datos["folio_unico"];
                loTrxDetailFT.folio_tomi = datos["folio_unico"];
                lsSW_END2END_REF = busca_valor_xml(datos["des_variables_xml"], "UETR").Trim;
                if (!string.IsNullOrEmpty(lsSW_END2END_REF))
                {
                    lsSLA_UETR = busca_valor_xml(datos["des_variables_xml"], "SLA_UETR").Trim;
                    loTrxDetailFT.SW_END2END_REF = lsSW_END2END_REF;
                }

                return migrac.Comunes.registra_TRX_WS(datos["folio_unico"], goMW_TipoOperacion.tabla_trabajo, "SWF_IN", icn, tipoOperacion, ref loTrxMaster, ref loTrxDetailFT, datos["des_variables_xml"]);
            }

            catch (Exception lexError)
            {
                write_Log("ERROR|" + tipoOperacion + ".T24_REGISTRO|Se presenta exception: " + lexError.ToString());
                gexUltimaExcepcion = lexError;
            }
            return false;
        }
    }
}
