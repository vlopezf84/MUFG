using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;

namespace migrac
{
    static class Comunes
    {
        public static bool Registra_E_S(ref Dictionary<string, object> datos, bool es_bloque_transactional = false)
        {
            DbCommand loCmd_TOMI;
            DbDataReader lrsDatos;
            string lsSQL;
            bool lbRegistrar;
            int liSalida;

            // Busqueda del registro
            lbRegistrar = false;
            lsSQL = "SELECT COUNT(1) AS num_regs FROM tb_srv_swf_plan_trabajo_detalle WHERE tipo_operacion='" + gsTipoOperacion + "' AND folio='" + datos["icn"] + "' AND flg_terminado=0 AND alias_proceso='TOMI_ENTRADAS/SALIDAS'";
            if (es_bloque_transactional)
            {
                lrsDatos = goTOMI_Database.Execute_Query_Transaction(lsSQL);
            }
            else
            {
                lrsDatos = goTOMI_Database.Execute_Query(lsSQL);
            }
            if (!(lrsDatos == null))
            {
                while (lrsDatos.Read)
                {
                    if (lrsDatos[0] > 0)
                    {
                        lbRegistrar = true;
                    }
                }
                lrsDatos.Close();
                lrsDatos = default;
            }

            write_Log("INFO|Comunes.Registra_E_S|Por_registrar=" + lbRegistrar + ".");

            if (lbRegistrar)
            {
                // Definición de Procedimiento Almacenado
                if (es_bloque_transactional)
                {
                    loCmd_TOMI = goTOMI_Database.newCommand_Transaction("usp_TOMBIN_INSERT_SRV_ENTRADAS_SALIDAS");
                }
                else
                {
                    loCmd_TOMI = goTOMI_Database.newCommand("usp_TOMBIN_INSERT_SRV_ENTRADAS_SALIDAS");
                }
                loCmd_TOMI.CommandType = CommandType.StoredProcedure;
                // Definición de parámetros
                loCmd_TOMI.Parameters.Clear();
                goTOMI_Database.AddParameter(loCmd_TOMI, "@Referencia", datos["referencia"], DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@Num_Cliente", datos["num_cliente"], DbType.Int32);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@CDL", datos["num_cliente"], DbType.Int32);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@Ordenante", datos["ordenante"], DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@Operacion", datos["operacion"], DbType.Int32);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@OperacionDesc", datos["operacion_desc"], DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@Tipo", datos["tipo"], DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@TipoDesc", datos["tipo_desc"], DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@Cuenta", datos["cuenta"], DbType.Int32);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@Nombre", datos["nombre"], DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@CuentaMoneda", datos["moneda"], DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@Via", datos["via"], DbType.Int32);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@ViaDesc", datos["via_desc"], DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@Importe", datos["importe"], DbType.Decimal);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@Saldo", datos["saldo"], DbType.Decimal);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@Comentarios", datos["comentarios"], DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@Fecha_Captura", datos["fec_captura"], DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@FechaValor", datos["fec_valor"], DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@Hora", datos["hora"], DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@Capturista", datos["capturista"], DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@Fad", datos["fad"], DbType.Decimal);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@Referencia_Control", datos["ref_control"], DbType.String);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@Referencia_Control_Cont", datos["ref_control_cont"], DbType.Int32);
                goTOMI_Database.AddParameter(loCmd_TOMI, "@Salida", -1, DbType.Int32, default, ParameterDirection.Output);
                // Termina Definición de parámetros y hace el llamado
                write_Log("INFO|Comunes.Registro_E_S|usp_TOMBIN_INSERT_SRV_ENTRADAS_SALIDAS pasaron parametros, inicia ejecución.");
                loCmd_TOMI.ExecuteNonQuery();
                liSalida = loCmd_TOMI.Parameters("@Salida").Value;
                loCmd_TOMI = default;

                write_Log("INFO|Comunes.Registra_E_S|Paso la ejecución. Salida=" + liSalida + ".");

                if (liSalida == 0)
                {
                    if (es_bloque_transactional)
                    {
                        goTOMI_Database.Execute_Command_Transaction("UPDATE tb_srv_swf_plan_trabajo_detalle SET flg_terminado=1,fec_inicio=getDate(),fec_fin=getDate() WHERE tipo_operacion='" + gsTipoOperacion + "' AND folio='" + datos["icn"] + "' AND flg_terminado=0 AND alias_proceso='TOMI_ENTRADAS/SALIDAS'");
                    }
                    else
                    {
                        goTOMI_Database.Execute_Command("UPDATE tb_srv_swf_plan_trabajo_detalle SET flg_terminado=1,fec_inicio=getDate(),fec_fin=getDate() WHERE tipo_operacion='" + gsTipoOperacion + "' AND folio='" + datos["icn"] + "' AND flg_terminado=0 AND alias_proceso='TOMI_ENTRADAS/SALIDAS'");
                    }
                    return true;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                return false;
            }
        }

        // Public Function actualiza_operacion(icn As String) As Boolean
        // Dim loCmd_TOMI As DbCommand
        // Dim liRegAfectados As Integer

        // loCmd_TOMI = goTOMI_Database.newCommand_Transaction("usp_swf_termina_proceso_registro")
        // loCmd_TOMI.CommandType = CommandType.StoredProcedure
        // 'Definición de parámetros
        // loCmd_TOMI.Parameters.Clear()
        // ' Parametro 1
        // Dim lpICN As DbParameter = loCmd_TOMI.CreateParameter()
        // lpICN.ParameterName = "@icn"
        // lpICN.DbType = DbType.String
        // lpICN.Direction = ParameterDirection.Input
        // lpICN.Value = icn
        // loCmd_TOMI.Parameters.Add(lpICN)
        // ' Parametro 2
        // Dim lpTipoOperacion As DbParameter = loCmd_TOMI.CreateParameter()
        // lpTipoOperacion.ParameterName = "@tipo_operacion"
        // lpTipoOperacion.DbType = DbType.String
        // lpTipoOperacion.Direction = ParameterDirection.Input
        // lpTipoOperacion.Value = gsTipoOperacion          ' Mensaje Swift de entrada
        // loCmd_TOMI.Parameters.Add(lpTipoOperacion)

        // 'Termina Definición de parámetros y hace el llamado
        // write_Log("INFO|Comunes.actualiza_operacion|usp_swf_actualiza_datos_T24, pasaron los parametros inicia ejecución.")
        // liRegAfectados = loCmd_TOMI.ExecuteNonQuery()
        // write_Log("INFO|Comunes.actualiza_operacion|La operación se realizo exitosamente.")

        // Return IIf(liRegAfectados > 0, True, False)
        // End Function

        // Public Function termina_registro(icn As String, ByRef datos As Dictionary(Of String, Object)) As Boolean
        // Dim loCmd_TOMI As DbCommand
        // Dim liRegAfectados As Integer

        // ' Marco la operacion como terminada
        // loCmd_TOMI = goTOMI_Database.newCommand_Transaction("usp_swf_marca_op_terminada")
        // loCmd_TOMI.CommandType = CommandType.StoredProcedure
        // 'Definición de parámetros
        // loCmd_TOMI.Parameters.Clear()
        // ' Parametro 1
        // Dim lpICN As DbParameter = loCmd_TOMI.CreateParameter()
        // lpICN.ParameterName = "@icn"
        // lpICN.DbType = DbType.String
        // lpICN.Direction = ParameterDirection.Input
        // lpICN.Value = icn
        // loCmd_TOMI.Parameters.Add(lpICN)
        // ' Parametro 2
        // Dim lpTipoOperacion As DbParameter = loCmd_TOMI.CreateParameter()
        // lpTipoOperacion.ParameterName = "@tipo_operacion"
        // lpTipoOperacion.DbType = DbType.String
        // lpTipoOperacion.Direction = ParameterDirection.Input
        // lpTipoOperacion.Value = gsTipoOperacion          ' Mensaje Swift de entrada
        // loCmd_TOMI.Parameters.Add(lpTipoOperacion)
        // ' Parametro 3
        // Dim lpCveEstatus As DbParameter = loCmd_TOMI.CreateParameter()
        // lpCveEstatus.ParameterName = "@cve_estatus"
        // lpCveEstatus.DbType = DbType.String
        // lpCveEstatus.Direction = ParameterDirection.Input
        // lpCveEstatus.Value = "PROC"
        // loCmd_TOMI.Parameters.Add(lpCveEstatus)
        // ' Parametro 4
        // Dim lpCveUsuario As DbParameter = loCmd_TOMI.CreateParameter()
        // lpCveUsuario.ParameterName = "@cve_usuario"
        // lpCveUsuario.DbType = DbType.String
        // lpCveUsuario.Direction = ParameterDirection.Input
        // lpCveUsuario.Value = "JEAI"
        // loCmd_TOMI.Parameters.Add(lpCveUsuario)
        // ' Parametro 5
        // Dim lpDesRechazo As DbParameter = loCmd_TOMI.CreateParameter()
        // lpDesRechazo.ParameterName = "@des_rechazo"
        // lpDesRechazo.DbType = DbType.String
        // lpDesRechazo.Direction = ParameterDirection.Input
        // lpDesRechazo.Value = DBNull.Value
        // loCmd_TOMI.Parameters.Add(lpDesRechazo)
        // 'Termina Definición de parámetros y hace el llamado
        // write_Log("INFO|Comunes.termina_registro|usp_swf_marca_op_terminada, pasaron los parametros inicia ejecución.")
        // loCmd_TOMI.ExecuteNonQuery()
        // write_Log("INFO|Comunes.termina_registro|Paso la ejecución.")
        // write_Log("INFO|Comunes.termina_registro|La operación se realizo exitosamente, folio_unico='" & datos("folio_unico") & "'.")

        // 'Termina Definición de parámetros y hace el llamado
        // liRegAfectados = loCmd_TOMI.ExecuteNonQuery()
        // If liRegAfectados > 0 Then
        // write_Log("INFO|210.termina_registro|La operación se realizo exitosamente.")
        // Return True
        // Else
        // write_Log("INFO|210.termina_registro|No se pudo realizar el registro.")
        // Return False
        // End If
        // End Function

        public static int marca_op_con_error(string icn, string mensaje_error)
        {
            try
            {
                DbCommand loCmd;

                if (icn == null)
                {
                    return 0;
                }
                if (mensaje_error == null)
                {
                    return 0;
                }

                // Log
                write_Log("INFO|marca_op_con_error|Intento registrar la operación con error, icn='" + icn + "'.");

                // Definición de Procedimiento Almacenado
                loCmd = goTOMI_Database.newCommand("usp_swf_marca_op_error");
                loCmd.CommandType = CommandType.StoredProcedure;
                // Definición de parámetros
                loCmd.Parameters.Clear();
                // Parametro 1
                DbParameter lpICN = loCmd.CreateParameter();
                lpICN.ParameterName = "@icn";
                lpICN.DbType = DbType.String;
                lpICN.Direction = ParameterDirection.Input;
                lpICN.Value = icn;
                loCmd.Parameters.Add(lpICN);
                // Parametro 2
                DbParameter lpTipoOperacion = loCmd.CreateParameter();
                lpTipoOperacion.ParameterName = "@tipo_operacion";
                lpTipoOperacion.DbType = DbType.String;
                lpTipoOperacion.Direction = ParameterDirection.Input;
                lpTipoOperacion.Value = gsTipoOperacion;          // Mensaje Swift de entrada
                loCmd.Parameters.Add(lpTipoOperacion);
                // Parametro 3
                DbParameter lpDesError = loCmd.CreateParameter();
                lpDesError.ParameterName = "@des_error";
                lpDesError.DbType = DbType.String;
                lpDesError.Direction = ParameterDirection.Input;
                lpDesError.Value = mensaje_error;
                loCmd.Parameters.Add(lpDesError);
                // Termina Definición de parámetros y hace el llamado
                return loCmd.ExecuteNonQuery();
            }
            catch (Exception lexErrorMarca)
            {
                write_Log("ERROR|marca_op_con_error|No se pudo marcar el error:" + lexErrorMarca.ToString());
            }
            return 0;
        }

        public static int marca_op_terminada(string icn, string estatus, string usuarioAutorizacion, string detalleRechazo = "")
        {
            try
            {
                DbCommand loCmd;

                if (icn == null)
                {
                    return 0;
                }

                // Log
                write_Log("INFO|marca_op_terminada|Intento registrar la operación como terminada, icn='" + icn + "'.");

                // Definición de Procedimiento Almacenado
                loCmd = goTOMI_Database.newCommand("usp_swf_marca_op_terminada");
                loCmd.CommandType = CommandType.StoredProcedure;
                // loCmd.CommandTimeout = MAX_SP_TIMEOUT
                // Definición de parámetros
                loCmd.Parameters.Clear();
                // Parametro 1
                DbParameter lpICN = loCmd.CreateParameter();
                lpICN.ParameterName = "@icn";
                lpICN.DbType = DbType.String;
                lpICN.Direction = ParameterDirection.Input;
                lpICN.Value = icn;
                loCmd.Parameters.Add(lpICN);
                // Parametro 2
                DbParameter lpTipoOperacion = loCmd.CreateParameter();
                lpTipoOperacion.ParameterName = "@tipo_operacion";
                lpTipoOperacion.DbType = DbType.String;
                lpTipoOperacion.Direction = ParameterDirection.Input;
                lpTipoOperacion.Value = gsTipoOperacion;          // Mensaje Swift de entrada
                loCmd.Parameters.Add(lpTipoOperacion);
                // Parametro 3
                DbParameter lpCveEstatus = loCmd.CreateParameter();
                lpCveEstatus.ParameterName = "@cve_estatus";
                lpCveEstatus.DbType = DbType.String;
                lpCveEstatus.Direction = ParameterDirection.Input;
                lpCveEstatus.Value = estatus;
                loCmd.Parameters.Add(lpCveEstatus);
                // Parametro 4
                DbParameter lpCveUsuario = loCmd.CreateParameter();
                lpCveUsuario.ParameterName = "@cve_usuario";
                lpCveUsuario.DbType = DbType.String;
                lpCveUsuario.Direction = ParameterDirection.Input;
                lpCveUsuario.Value = usuarioAutorizacion;
                loCmd.Parameters.Add(lpCveUsuario);
                // Parametro 5
                DbParameter lpDesRechazo = loCmd.CreateParameter();
                lpDesRechazo.ParameterName = "@des_rechazo";
                lpDesRechazo.DbType = DbType.String;
                lpDesRechazo.Direction = ParameterDirection.Input;
                lpDesRechazo.Value = detalleRechazo;
                loCmd.Parameters.Add(lpDesRechazo);
                // Termina Definición de parámetros y hace el llamado
                return loCmd.ExecuteNonQuery();
            }
            catch (Exception lexErrorMarca)
            {
                write_Log("ERROR|marca_op_terminada|No se pudo marcar el error:" + lexErrorMarca.ToString());
            }
            return 0;
        }

        public static string dame_banco(string cuenta_clabe)
        {
            Dictionary<string, string> loBancos;
            string lsInicioCta;

            // Inicio de variables
            loBancos = lista_bmx();
            lsInicioCta = cuenta_clabe.Substring(0, 3);
            foreach (var lsCve_banco in loBancos.Keys)
            {
                if ((lsInicioCta ?? "") == (lsCve_banco.Substring(2, 3) ?? ""))
                {
                    return lsCve_banco + "-" + loBancos[lsCve_banco];
                }
            }
            return "";
        }

        private static Dictionary<string, string> lista_bmx()
        {
            DbDataReader lrsDatos;
            DbCommand loCmd;
            Dictionary<string, string> loRegreso;

            // Inicio de variables
            loRegreso = new Dictionary<string, string>();

            // Definición de Procedimiento Almacenado
            loCmd = goTOMI_Database.newCommand("usp_spei_listaBancos");
            loCmd.CommandType = CommandType.StoredProcedure;
            // Definición de parámetros
            loCmd.Parameters.Clear();
            // Termina Definición de parámetros y hace el llamado
            lrsDatos = loCmd.ExecuteReader();
            if (!(lrsDatos == null))
            {
                while (lrsDatos.Read)
                    // Alta del dato
                    loRegreso.Add(((string)lrsDatos("ins_clave")).PadLeft(5, '0'), lrsDatos("ins_nombre"));
                lrsDatos.Close();
                lrsDatos = default;
            }
            return loRegreso;
        }

        public static int busca_cif_datos(string cif, ref string swift, ref string nombre, ref string calle)
        {
            DbDataReader lrsDatos;
            DbCommand loCmd;

            // Definición de Procedimiento Almacenado
            loCmd = goTOMI_Database.newCommand("usp_swf_get_cif_datos");
            loCmd.CommandType = CommandType.StoredProcedure;
            // Definición de parámetros
            loCmd.Parameters.Clear();
            // Parametro 1
            DbParameter lpNumCIF = loCmd.CreateParameter();
            lpNumCIF.ParameterName = "@num_cif";
            lpNumCIF.DbType = DbType.String;
            lpNumCIF.Direction = ParameterDirection.Input;
            lpNumCIF.Value = cif;
            loCmd.Parameters.Add(lpNumCIF);
            // Parametro 1
            DbParameter lpCveSwift = loCmd.CreateParameter();
            lpCveSwift.ParameterName = "@cve_swift";
            lpCveSwift.DbType = DbType.String;
            lpCveSwift.Direction = ParameterDirection.Input;
            lpCveSwift.Value = DBNull.Value;
            loCmd.Parameters.Add(lpCveSwift);
            // Termina Definición de parámetros y hace el llamado
            lrsDatos = loCmd.ExecuteReader();
            if (!(lrsDatos == null))
            {
                while (lrsDatos.Read)
                {
                    // Alta del dato
                    swift = lrsDatos("cve_swift");
                    nombre = lrsDatos("des_nombre");
                    calle = lrsDatos("des_calle");
                }
                lrsDatos.Close();
                lrsDatos = default;
            }
            return 1;
        }

        public static string quita_linea(string texto, int largo = 0)
        {
            string lsRegreso;

            if (texto == null)
                return "";
            if (string.IsNullOrEmpty(texto))
                return "";
            if (texto.Length > 2)
            {
                if (Information.IsNumeric(texto.Substring(0, 1)) & texto.Substring(1, 1) == "/")
                {
                    lsRegreso = texto.Substring(2);
                    if (largo == 0 | lsRegreso.Length <= largo)
                    {
                        return lsRegreso;
                    }
                    else
                    {
                        return lsRegreso.Substring(0, largo);
                    }
                    return texto.Substring(2);
                }
                else if (largo == 0 | texto.Length <= largo)
                {
                    return texto;
                }
                else
                {
                    return texto.Substring(0, largo);
                }
            }
            return texto;
        }

        public static List<string> convierteTexto_a_Multivalor_SinCortar_Local(string texto, int MW_SeparadorMultivalorLength, [Optional, DefaultParameterValue(0)] ref int TotalLineas, bool Prefix = false)
        {
            string strCadena = "";
            var retorno = new List<string>();    // lista con los parrafos
            string contenedor;

            texto = texto.Trim();
            while (texto.StartsWith("-"))
            {
                texto = texto.Substring(1);
                texto = texto.Trim();
            }

            if (texto.Length == 0)
            {
                // si la cadena de entrada esta vacia devolvemos una coleccion vacia.
                return retorno;
            }
            else if (texto.Length <= MW_SeparadorMultivalorLength)
            {
                // si la cadena tiene [NumCaracteresEnParrafo] caracteres o menos, devolvemos sólo un elemento con la cadena entera
                if (Prefix)
                {
                    strCadena = "//" + texto;
                }
                else
                {
                    retorno.Add(texto);
                }

                TotalLineas = 1;
                return retorno;
            }

            // contenedor para almacenar las palabras mientras que la longitud del párrafo sea menor que [NumCaracteresEnParrafo] 
            contenedor = "";

            bool blnAux = false;
            int intCont = 0;
            string[] Arreglo = texto.Split(' ');

            foreach (var palabra in Arreglo)
            {
                string PalabraTemp = "";

                if (!blnAux)
                {
                    if (Arreglo.Length > intCont + 1)
                    {
                        if (Arreglo[intCont + 1].ToString().StartsWith("-"))
                        {
                            // PalabraTemp = Arreglo(intCont) & " " & Arreglo(intCont + 1)
                            PalabraTemp = Arreglo[intCont];
                            blnAux = false;
                        }
                        else
                        {
                            PalabraTemp = Arreglo[intCont];
                        }
                    }
                    else
                    {
                        PalabraTemp = Arreglo[intCont];
                    }


                    // si la palabra tiene más de [NumCaracteresEnParrafo] caracteres seguidos, se trozea
                    if (PalabraTemp.Length >= MW_SeparadorMultivalorLength)
                    {
                        if (contenedor.Length > 0)
                        {
                            retorno.Add(contenedor);
                            contenedor = "";
                        }

                        do
                        {
                            string trozo = PalabraTemp.Substring(0, MW_SeparadorMultivalorLength);
                            retorno.Add(trozo);
                            PalabraTemp = PalabraTemp.Remove(0, MW_SeparadorMultivalorLength);
                        }
                        while (PalabraTemp.Length >= MW_SeparadorMultivalorLength);
                    }

                    if (PalabraTemp.Length > 0)
                    {
                        if (contenedor.Length + PalabraTemp.Length + 1 > MW_SeparadorMultivalorLength)
                        {
                            retorno.Add(contenedor);
                            contenedor = PalabraTemp;
                        }
                        // If retorno.Count = 0 And contenedor = "" Then
                        else if (string.IsNullOrEmpty(contenedor))
                        {
                            contenedor = PalabraTemp;
                        }
                        else
                        {
                            contenedor = contenedor + " " + PalabraTemp;

                        }
                    }
                }
                else
                {
                    blnAux = false;
                }
                intCont += 1;

            }


            if (contenedor.Length > 0)
                retorno.Add(contenedor);

            // TextBox3.Text = ""

            foreach (string Elemento in retorno)
            {
                if (Prefix)
                {
                    // If strCadena = "" Then
                    // strCadena += Elemento & "|"
                    // Else
                    strCadena += "//" + Elemento + "|";
                }
                // End If
                else
                {
                    strCadena += Elemento + "|";
                }
                // TextBox3.Text += Elemento & vbCrLf
            }
            strCadena = Strings.Mid(strCadena, 1, strCadena.Length - 1);
            TotalLineas = retorno.Count;

            return retorno;
        }

        public static bool registra_TRX_WS(string folio_unico, string tabla, string tipo_operacion, string folio, string cve_mensaje, ref T24_MW_TrxMaster clsTrxMaster, ref T24_MW_TrxDetail clsTrxDetail, string des_variables_xml)
        {

            string strFolioID = string.Empty;
            var lsResponseService = default(bool);
            string lsTransactionID = string.Empty;
            string lsError = string.Empty;

            // logs
            write_Log("INFO|Comunes.registra_TRX_WS|Cuenta: '" + clsTrxDetail.debit_acct_no + "'.");
            write_Log("INFO|Comunes.registra_TRX_WS|Cuenta BEN: '" + clsTrxDetail.credit_acct_no + "'.");
            write_Log("INFO|Comunes.registra_TRX_WS|Importe: '" + clsTrxDetail.debit_amount + "'.");
            write_Log("INFO|Comunes.registra_TRX_WS|A registrar operación.");

            write_Log("INFO|Comunes.registra_TRX_WS|A buscar comisiones.");

            try
            {
                // Calculo de esquema de comision o sin esquema de comisiones (la función actualiza TrxOperation_ID, TrxInternal_Type y TrxTransaction_Type)
                goT24_Connection.busca_esquema_TRX(clsTrxMaster);

                write_Log("INFO|Comunes.registra_TRX_WS|Finalmente, el esquema de comisión será: Transaction Type='" + clsTrxMaster.TrxTransaction_Type + "', esquema='" + clsTrxMaster.TrxInternal_Type + "'.");
                clsTrxDetail.transaction_type = clsTrxMaster.TrxTransaction_Type;

                write_Log("INFO|Comunes.registra_TRX_WS|Inicia invocación del WS");

                // Invocación del WS  
                ImprimirMasterDetail(clsTrxMaster, clsTrxDetail);

                LimpiarCamposDetail(ref clsTrxDetail);
                LimpiarCamposXMLVariables(ref des_variables_xml);

                if (clsTrxMaster.TrxInternal_Type == "SIN_ESQUEMA")
                {
                    write_Log("INFO|Comunes.registra_TRX_WS|Se ejecutará la versión SIN_ESQUEMA");
                    lsResponseService = registraT24_WOSH(clsTrxMaster, clsTrxDetail, des_variables_xml, ref lsTransactionID, ref lsError);
                }
                else if (clsTrxMaster.TrxInternal_Type == "CON_ESQUEMA")
                {
                    write_Log("INFO|Comunes.registra_TRX_WS|Se ejecutará la versión CON_ESQUEMA");
                    lsResponseService = registraT24_WSH(clsTrxMaster, clsTrxDetail, des_variables_xml, ref lsTransactionID, ref lsError);
                }

                if (!lsResponseService)
                {
                    // Considerar el caso cuando no tiene Fondos 
                    if (lsError.Contains("OVERRIDE"))
                    {
                        ProcesaCuentaSinFondosSWF_MX(cve_mensaje, folio);
                    }
                    else
                    {
                        ProcesaRegistroConError(folio, cve_mensaje, lsError);
                    }
                }
                else                 // Registro exitoso
                {
                    ProcesaRegistroExitoso(lsTransactionID, folio, cve_mensaje);
                }
            }
            catch (Exception ex)
            {
                write_Log("ERROR|registra_TRX_WS|" + cve_mensaje + "|Se presenta error en el folio " + folio + " - " + ex.ToString(), "");
                return false;
            }
            return true;
        }

        public static Result registra_TRX_WS_Result(string folio_unico, string tabla, string tipo_operacion, string folio, string cve_mensaje, ref T24_MW_TrxMaster clsTrxMaster, ref T24_MW_TrxDetail clsTrxDetail, string des_variables_xml)
        {
            string lsTransactionID = string.Empty;
            string strFolioID = string.Empty;
            string lsError = string.Empty;
            var lsResponseService = default(bool);

            // logs
            write_Log("INFO|Comunes.registra_TRX_WS|Cuenta: '" + clsTrxDetail.debit_acct_no + "'.");
            write_Log("INFO|Comunes.registra_TRX_WS|Cuenta BEN: '" + clsTrxDetail.credit_acct_no + "'.");
            write_Log("INFO|Comunes.registra_TRX_WS|Importe: '" + clsTrxDetail.debit_amount + "'.");
            write_Log("INFO|Comunes.registra_TRX_WS|A registrar operación.");
            write_Log("INFO|Comunes.registra_TRX_WS|A buscar comisiones.");

            try
            {
                // Calculo de esquema de comision o sin esquema de comisiones (la función actualiza TrxOperation_ID, TrxInternal_Type y TrxTransaction_Type)
                goT24_Connection.busca_esquema_TRX(clsTrxMaster);

                write_Log("INFO|Comunes.registra_TRX_WS|Finalmente, el esquema de comisión será: Transaction Type='" + clsTrxMaster.TrxTransaction_Type + "', esquema='" + clsTrxMaster.TrxInternal_Type + "'.");
                clsTrxDetail.transaction_type = clsTrxMaster.TrxTransaction_Type;

                write_Log("INFO|Comunes.registra_TRX_WS|Inicia invocación del WS");

                // Invocación del WS  
                ImprimirMasterDetail(clsTrxMaster, clsTrxDetail);

                LimpiarCamposDetail(ref clsTrxDetail);
                LimpiarCamposXMLVariables(ref des_variables_xml);

                if (clsTrxMaster.TrxInternal_Type == "SIN_ESQUEMA")
                {
                    write_Log("INFO|Comunes.registra_TRX_WS|Se ejecutará la versión SIN_ESQUEMA");
                    lsResponseService = registraT24_WOSH(clsTrxMaster, clsTrxDetail, des_variables_xml, ref lsTransactionID, ref lsError);
                }
                else if (clsTrxMaster.TrxInternal_Type == "CON_ESQUEMA")
                {
                    write_Log("INFO|Comunes.registra_TRX_WS|Se ejecutará la versión CON_ESQUEMA");
                    lsResponseService = registraT24_WSH(clsTrxMaster, clsTrxDetail, des_variables_xml, ref lsTransactionID, ref lsError);
                }

                if (!lsResponseService)
                {
                    // Considerar el caso cuando no tiene Fondos 
                    if (lsError.Contains("OVERRIDE"))
                    {
                        ProcesaCuentaSinFondosSWF_MX(cve_mensaje, folio);
                        return Result<string>.Failed("La cuenta no tiene los fondos suficientes para cubrir el monto de la operacion con folio " + folio, ErrorCodeEnum.NoFunds);
                    }
                    else if (lsError.Contains("SWIFT CHAR"))
                    {
                        return Result<string>.Failed("El mensaje contiene caracteres invalidos para la operacion con folio " + folio, ErrorCodeEnum.InvalidSwiftChar);
                    }
                    else
                    {
                        ProcesaRegistroConError(folio, cve_mensaje, lsError);
                        return Result<string>.Failed(lsError);
                    }
                }
                else                 // Registro exitoso
                {
                    ProcesaRegistroExitoso(lsTransactionID, folio, cve_mensaje);
                }
            }
            catch (TimeoutException toEx)
            {
                write_Log("ERROR|registra_TRX_WS|" + cve_mensaje + "|Se presenta error en el folio " + folio + " - " + toEx.ToString(), "");
                return Result<string>.Failed("El servicio no regreso una respuesta, varificar operacion en T24.", ErrorCodeEnum.T24TimeoutError);
            }
            catch (Exception ex)
            {
                write_Log("ERROR|registra_TRX_WS|" + cve_mensaje + "|Se presenta error en el folio " + folio + " - " + ex.ToString(), "");
                return Result<string>.Failed("Se presenta error: " + ex.Message);
            }
            return Result<string>.Success(lsTransactionID);
        }

        public static bool ReintentoPermitidoSWF_MX(string cve_mensaje, string lsFolio)
        {
            try
            {
                DateTime? fecUlt = default;

                write_Log("INFO|ReintentoPermitido|Consulta para verificar si la operación " + cve_mensaje + " con folio " + lsFolio + " se había registrado previamente sin fondos", "");
                DbDataReader dbDataReader = goTOMI_Database.Execute_Query("SELECT FECHA_REGISTRO FROM TB_SRV_T24_MW_ADMON_FOLIOS_SWF_MX WHERE FOLIO='" + lsFolio + "' AND CVE_MENSAJE ='" + cve_mensaje + "' AND ESTATUS = 'SF'");
                if (!(dbDataReader == null))
                {
                    while (dbDataReader.Read())
                        fecUlt = Conversions.ToDate(dbDataReader.Item("FECHA_REGISTRO"));
                    dbDataReader.Close();
                    dbDataReader = default;
                }

                if (fecUlt.HasValue)
                {

                    write_Log("INFO|ReintentoPermitido|La operación " + cve_mensaje + " con folio " + lsFolio + " se encuentra registrada previamente sin fondos", "");

                    if (Operators.CompareString(Strings.Format(DateAndTime.TimeValue(Conversions.ToString(DateTime.Now)), "HH:mm"), Strings.Format(DateAndTime.TimeValue(gsSinFondosHoraValida), "HH:mm"), false) > 0)
                    {
                        goTOMI_Database.Execute_Command(" DELETE FROM TB_SRV_T24_MW_ADMON_FOLIOS_SWF_MX WHERE FOLIO='" + lsFolio + "' AND CVE_MENSAJE='" + cve_mensaje + "' AND ESTATUS = 'SF' ");
                        write_Log("INFO|ReintentoPermitido| Se permite el reintento de la operación " + cve_mensaje + " con folio " + lsFolio + " pues la hora es válida", "");
                        return true;
                    }

                    if (DateTime.Compare(DateTime.Now, DateAndTime.DateAdd(DateInterval.Minute, (double)gsSinFondosTiempoEspera, fecUlt.Value)) > 0)
                    {
                        Definiciones.goTOMI_Database.Execute_Command(" DELETE FROM TB_SRV_T24_MW_ADMON_FOLIOS_SWF_MX WHERE FOLIO=" + lsFolio + " AND CVE_MENSAJE='" + cve_mensaje + "' AND ESTATUS = 'SF' ");
                        write_Log("INFO|ReintentoPermitido| Se permite el re intento de la operación " + cve_mensaje + " con folio " + lsFolio + " pues los minutos son válidos", "");
                        return true;
                    }

                    write_Log("INFO|ReintentoPermitido| No se permitió el re intento de la operación " + cve_mensaje + " con folio " + lsFolio + " por no cumplir condiciones válidas", "");
                    return false;
                }

                write_Log("INFO|ReintentoPermitido|Se permite el intento de ingreso de la operación " + cve_mensaje + " con folio " + lsFolio + ". No hay histórico de falta de fondos", "");
                return true;
            }
            catch (Exception ex)
            {
                write_Log("ERROR|ReintentoPermitido|" + cve_mensaje + "|Se presenta error en el folio " + lsFolio + " - " + ex.ToString(), "");
                return false;
            }
        }

        public static void ProcesaCuentaSinFondosSWF_MX(string cve_mensaje, string lsFolio)
        {
            try
            {
                write_Log("INFO|ProcesaCuentaSinFondos| Inicia el procedimiento para tratar la operacion " + cve_mensaje + " con folio " + lsFolio + " por falta de fondos", "");
                goTOMI_Database.Execute_Command("UPDATE tb_srv_swf_plan_trabajo_maestro SET flg_con_error=0,err_descripcion='La cuenta no tiene los fondos para cubrir la transacción.' WHERE tipo_operacion= 'SWIFT_IN' AND folio='" + lsFolio + "' AND CVE_MENSAJE='" + cve_mensaje + "'");
                int num = 0;

                DbDataReader lrsDatos = goTOMI_Database.Execute_Query("SELECT COUNT(1) AS valor FROM TB_SRV_T24_MW_ADMON_FOLIOS_SWF_MX WHERE FOLIO='" + lsFolio + "' AND CVE_MENSAJE ='" + cve_mensaje + "' AND ESTATUS = 'SF'");
                if (!(lrsDatos == null))
                {
                    while (lrsDatos.Read)
                        num = (int)lrsDatos("valor").ToString();
                    lrsDatos.Close();
                    lrsDatos = default;
                }

                if (num == 0)
                {
                    goTOMI_Database.Execute_Command("INSERT INTO TB_SRV_T24_MW_ADMON_FOLIOS_SWF_MX ([FOLIO],[CVE_MENSAJE],[TIPO_OPERACION],[FECHA_REGISTRO],[ESTATUS]) VALUES ('" + lsFolio + "','" + cve_mensaje + "', 'SWIFT_IN', getDate(), 'SF');");
                    write_Log("INFO|ProcesaCuentaSinFondos| Inserción de la operacion " + cve_mensaje + " con folio " + lsFolio + " en la tabla TB_SRV_T24_MW_ADMON_FOLIOS_SWF_MX", "");
                }
                else
                {
                    goTOMI_Database.Execute_Command("UPDATE TB_SRV_T24_MW_ADMON_FOLIOS_SWF_MX SET FECHA_REGISTRO=getDate() WHERE folio='" + lsFolio + "' AND CVE_MENSAJE = '" + cve_mensaje + "' AND TIPO_OPERACION='SWIFT_IN' AND ESTATUS = 'SF'");
                    write_Log("INFO|ProcesaCuentaSinFondos| Actualización de la operacion " + cve_mensaje + " con folio " + lsFolio + " en la tabla TB_SRV_T24_MW_ADMON_FOLIOS_SWF_MX", "");
                }
            }
            catch (Exception ex)
            {
                write_Log("ERROR|ProcesaCuentaSinFondos|" + cve_mensaje + "|Se presenta error en el folio " + lsFolio + " - " + ex.ToString(), "");

                throw new Exception("Error al Procesar la Cuenta Sin Fondos");
            }
        }

        public static void ProcesaRegistroExitoso(string transactionId, string folio, string cve_mensaje)
        {
            string lsSQL;
            try
            {
                lsSQL = "BEGIN" + Constants.vbCrLf + " UPDATE tb_srv_swf_plan_trabajo_detalle SET flg_terminado = 1, flg_con_error = 0, fec_fin = getDate() WHERE tipo_operacion = 'SWIFT_IN' AND folio = '" + folio + "' AND alias_proceso = 'T24_REGISTRO';" + Constants.vbCrLf + " UPDATE tb_srv_swf_plan_trabajo_maestro SET flg_con_error = 0 WHERE tipo_operacion = 'SWIFT_IN' AND folio = '" + folio + "';" + Constants.vbCrLf + " UPDATE tb_srv_swf_trabajo_mx SET nf_estatus = 'PROC', t24_transaction_id = '" + transactionId + "', nf_fecha_registro = getDate(), nf_hora_autorizacion = CONVERT(VARCHAR,getDate(),108) WHERE nf_tipo = 'SWIFT_IN' AND nf_folio = '" + folio + "';" + Constants.vbCrLf + " UPDATE tb_srv_swf_trabajo SET nf_estatus = 'PROC', t24_transaction_id = '" + transactionId + "', nf_fecha_registro = getDate(), nf_hora_autorizacion = CONVERT(VARCHAR,getDate(),108) WHERE nf_tipo = 'SWIFT_IN' AND nf_folio = '" + folio + "';" + Constants.vbCrLf + " UPDATE tb_srv_swf_plan_trabajo_maestro SET T24_Ref = '" + transactionId + "' WHERE tipo_operacion = 'SWIFT_IN' AND folio = '" + folio + "';" + Constants.vbCrLf + " UPDATE TB_SRV_T24_MW_ADMON_FOLIOS_SWF_MX SET ESTATUS = 'CONF', FECHA_REGISTRO = getDate() WHERE folio='" + folio + "' AND CVE_MENSAJE = '" + cve_mensaje + "' AND TIPO_OPERACION='SWIFT_IN';" + Constants.vbCrLf + " END;";
                write_Log("INFO|ProcesaRegistroExitoso|Se actualizaron los planes de trabajo");
                goTOMI_Database.Execute_Command(lsSQL);
            }
            catch (Exception ex)
            {
                write_Log("ERROR|ProcesaRegistroExitoso|" + cve_mensaje + "|Se presenta error en el folio " + folio + " - " + ex.ToString(), "");
                throw new Exception("Error al registrar éxito en la transacción");
            }
        }

        public static void ProcesaRegistroConError(string folio, string cve_mensaje, string des_response)
        {
            string lsSQL = string.Empty;
            try
            {
                lsSQL = "BEGIN" + Constants.vbCrLf + " UPDATE tb_srv_swf_plan_trabajo_detalle SET flg_con_error=1,err_descripcion= '" + des_response + "' WHERE tipo_operacion='SWIFT_IN' AND folio='" + folio + "' AND alias_proceso='T24_REGISTRO'; " + Constants.vbCrLf + " UPDATE tb_srv_swf_plan_trabajo_maestro SET flg_con_error=1,err_descripcion='" + des_response + "' WHERE tipo_operacion='SWIFT_IN' AND folio='" + folio + "'; " + Constants.vbCrLf + " END;";

                goTOMI_Database.Execute_Command(lsSQL);
            }
            catch (Exception ex)
            {
                write_Log("ERROR|ProcesaRegistroConError|" + cve_mensaje + "|Se presenta error en el folio " + folio + " - " + ex.ToString(), "");
                throw new Exception("Error al registrar error en la transacción");
            }
        }

        public static bool registraT24_WSH(T24_MW_TrxMaster clsTrxMaster, T24_MW_TrxDetail clsTrxDetail, string des_variables_xml, ref string lsTransactionID, ref string lsError)
        {
            string company = gsWST24Company;
            string password = gsWST24Password;
            string userName = gsWST24UserName;

            bool result;
            var wsT24SwiftInRef = new wsT24SwiftIn.T24WebServicesImplClient();
            var req = new wsT24SwiftIn.SWIFTINWITHSCHEMARequest();

            var wrc = new wsT24SwiftIn.webRequestCommon();
            wrc.company = company;
            wrc.password = password;
            wrc.userName = userName;

            var ofsFunction = new wsT24SwiftIn.ofsFunction();
            var ftSwift = new wsT24SwiftIn.FUNDSTRANSFERSWIFTINWSCHEMAType();
            write_Log("INFO|registraT24_WSH|  ----DATOS ENVIADOS ----  |");

            ftSwift.TRANSACTIONTYPE = clsTrxDetail.transaction_type;
            write_Log("INFO|registraT24_WSH|ftSwift.TRANSACTIONTYPE " + ftSwift.TRANSACTIONTYPE);

            ftSwift.DEBITACCTNO = clsTrxDetail.debit_acct_no;
            write_Log("INFO|registraT24_WSH|ftSwift.DEBITACCTNO " + ftSwift.DEBITACCTNO);

            ftSwift.DEBITCURRENCY = clsTrxDetail.debit_currency;
            write_Log("INFO|registraT24_WSH|ftSwift.DEBITCURRENCY " + ftSwift.DEBITCURRENCY);

            ftSwift.DEBITAMOUNT = clsTrxDetail.debit_amount;
            write_Log("INFO|registraT24_WSH|ftSwift.DEBITAMOUNT " + ftSwift.DEBITAMOUNT);

            // ftSwift.DEBITVALUEDATE =  busca_valor_xml(des_variables_xml, "settled_date")

            ftSwift.DEBITTHEIRREF = clsTrxDetail.debit_their_ref;
            write_Log("INFO|registraT24_WSH|ftSwift.DEBITTHEIRREF " + ftSwift.DEBITTHEIRREF);

            ftSwift.CREDITTHEIRREF = clsTrxDetail.credit_their_ref;
            write_Log("INFO|registraT24_WSH|ftSwift.CREDITTHEIRREF " + ftSwift.CREDITTHEIRREF);

            ftSwift.CREDITACCTNO = clsTrxDetail.credit_acct_no;
            write_Log("INFO|registraT24_WSH|ftSwift.CREDITACCTNO " + ftSwift.CREDITACCTNO);

            ftSwift.CREDITCURRENCY = clsTrxDetail.credit_currency;
            write_Log("INFO|registraT24_WSH|ftSwift.CREDITCURRENCY " + ftSwift.CREDITCURRENCY);

            ftSwift.CREDITAMOUNT = busca_valor_xml(des_variables_xml, "mensaje_moneda");

            // ftSwift.CREDITVALUEDATE =  busca_valor_xml(des_variables_xml, "settled_date")

            var gOrdCus = new wsT24SwiftIn.FUNDSTRANSFERSWIFTINWSCHEMATypeGORDERINGCUST();

            if (busca_valor_xml(des_variables_xml, "mensaje_tipo") == "PACS008")
            {
                var orderinCustNomAddr = extraeNodosXML(ref des_variables_xml, "ordering_name_addr");
                var orderingCustFinal = new List<string>();
                orderingCustFinal.Add("AC" + busca_valor_xml(des_variables_xml, "ordering_account"));
                orderingCustFinal = orderingCustFinal.Concat(orderinCustNomAddr).ToList();

                gOrdCus.ORDERINGCUST = orderingCustFinal.ToArray();
            }
            else
            {
                gOrdCus.ORDERINGCUST = new string[1] { clsTrxDetail.ordering_cust };
            }

            gOrdCus.g = "1";
            ftSwift.gORDERINGCUST = gOrdCus;

            foreach (string x in gOrdCus.ORDERINGCUST)
            {
                x = x.Replace(":", " ");
                write_Log("INFO|registraT24_WSH|ftSwift.ORDERINGCUST " + x);
            }

            var gOrdBank = new wsT24SwiftIn.FUNDSTRANSFERSWIFTINWSCHEMATypeGORDERINGBANK();
            gOrdBank.ORDERINGBANK = new string[1] { clsTrxDetail.ordering_bank };
            gOrdBank.g = "1";
            ftSwift.gORDERINGBANK = gOrdBank;

            foreach (var x in gOrdBank.ORDERINGBANK)
                write_Log(Operators.ConcatenateObject("INFO|registraT24_WSH|ftSwift.gORDERINGBANK ", x));

            // Dim gAccWithB As New wsT24SwiftIn.FUNDSTRANSFERSWIFTINWSCHEMATypeGACCTWITHBANK
            // gAccWithB.ACCTWITHBANK = New String(0) {busca_valor_xml(des_variables_xml, "acct_with_bank")}
            // gAccWithB.g = "1"
            // ftSwift.gACCTWITHBANK = gAccWithB

            // For Each x In gAccWithB.ACCTWITHBANK
            // write_Log("INFO|registraT24_WSH|ftSwift.ACCTWITHBANK " & x)
            // Next

            // ftSwift.RECEIVERBANK =""

            // Dim gReccorrBank As New wsT24SwiftIn.FUNDSTRANSFERSWIFTINWSCHEMATypeGRECCORRBANK
            // gReccorrBank.RECCORRBANK = New String(0) {busca_valor_xml(des_variables_xml, "rec_corr_bank")}
            // gReccorrBank.g = "1"
            // ftSwift.gRECCORRBANK = gReccorrBank

            // For Each x In gReccorrBank.RECCORRBANK
            // write_Log("INFO|registraT24_WSH|ftSwift.gRECCORRBANK " & x)
            // Next

            // Dim gIntBank As New wsT24SwiftIn.FUNDSTRANSFERSWIFTINWSCHEMATypeGINTERMEDBANK
            // gIntBank.INTERMEDBANK = New String(0) {busca_valor_xml(des_variables_xml, "intermed_bank")}
            // gIntBank.g = "1"
            // ftSwift.gINTERMEDBANK = gIntBank

            // For Each x In gIntBank.INTERMEDBANK
            // write_Log("INFO|registraT24_WSH|ftSwift.gINTERMEDBANK " & x)
            // Next

            ftSwift.BENOURCHARGES = clsTrxDetail.ben_our_charges;
            write_Log("INFO|registraT24_WSH|ftSwift.BENOURCHARGES " + ftSwift.BENOURCHARGES);

            // Dim gInSnCorBk As New wsT24SwiftIn.FUNDSTRANSFERSWIFTINWSCHEMATypeGINSENDCORRBK
            // gInSnCorBk.INSENDCORRBK = New String(0) {busca_valor_xml(des_variables_xml, "in_send_corr_b")}
            // gInSnCorBk.g = "1"
            // ftSwift.gINSENDCORRBK = gInSnCorBk
            // For Each x In gInSnCorBk.INSENDCORRBK
            // write_Log("INFO|registraT24_WSH|ftSwift.gINSENDCORRBK " & x)
            // Next

            ftSwift.RELATEDREF = clsTrxDetail.related_ref;
            write_Log("INFO|registraT24_WSH|ftSwift.RELATEDREF " + ftSwift.RELATEDREF);

            int argTotalLineas = 0;
            var instructions = convierteTexto_a_Multivalor_SinCortar_Local(clsTrxDetail.Instructions, 65, TotalLineas: ref argTotalLineas);

            var gInstructions = new wsT24SwiftIn.FUNDSTRANSFERSWIFTINWSCHEMATypeGINSTRUCTIONS();
            gInstructions.g = "1";
            gInstructions.INSTRUCTIONS = instructions.ToArray();
            ftSwift.gINSTRUCTIONS = gInstructions;

            foreach (var x in gInstructions.INSTRUCTIONS)
                write_Log(Operators.ConcatenateObject("INFO|registraT24_WSH|ftSwift.INSTRUCTIONS ", x));

            var beneficiaryNameAddr = extraeNodosXML(ref des_variables_xml, "beneficiary_name_addr");
            ftSwift.BENEFICIARYNAM = string.Join(", ", beneficiaryNameAddr);
            write_Log("INFO|registraT24_WSH|ftSwift.BENEFICIARYNAM " + ftSwift.BENEFICIARYNAM);

            ftSwift.SATELSYSREF = clsTrxDetail.Satel_Sys_Ref;
            write_Log("INFO|registraT24_WSH|ftSwift.SATELSYSREF " + ftSwift.SATELSYSREF);


            ftSwift.CUSTREF1 = clsTrxDetail.Cust_Ref1;
            ftSwift.CUSTREF2 = clsTrxDetail.Cust_Ref2;
            ftSwift.CUSTREF3 = clsTrxDetail.Cust_Ref3;
            ftSwift.CUSTREF4 = clsTrxDetail.Cust_Ref4;
            ftSwift.CUSTREF5 = clsTrxDetail.Cust_Ref5;

            write_Log("INFO|registraT24_WSH|ftSwift.CUSTREF1 " + ftSwift.CUSTREF1);
            write_Log("INFO|registraT24_WSH|ftSwift.CUSTREF2 " + ftSwift.CUSTREF2);
            write_Log("INFO|registraT24_WSH|ftSwift.CUSTREF3 " + ftSwift.CUSTREF3);
            write_Log("INFO|registraT24_WSH|ftSwift.CUSTREF4 " + ftSwift.CUSTREF4);
            write_Log("INFO|registraT24_WSH|ftSwift.CUSTREF5 " + ftSwift.CUSTREF5);

            ftSwift.SWEND2ENDREF = clsTrxDetail.SW_END2END_REF;
            write_Log("INFO|registraT24_WSH|ftSwift.SWEND2ENDREF " + ftSwift.SWEND2ENDREF);

            var ordering_cust_nm_ext = extraeNodosXML(ref des_variables_xml, "ordering_cust_nm_ext");
            var gOrdCuNmExt = new wsT24SwiftIn.FUNDSTRANSFERSWIFTINWSCHEMATypeGORDERCUNMEXT();
            if (ordering_cust_nm_ext.Count > 0)
            {
                gOrdCuNmExt.ORDERCUNMEXT = ordering_cust_nm_ext.ToArray();
            }
            else
            {
                gOrdCuNmExt.ORDERCUNMEXT = new string[] { };
            }
            gOrdCuNmExt.g = "1";
            ftSwift.gORDERCUNMEXT = gOrdCuNmExt;
            foreach (var x in gOrdCuNmExt.ORDERCUNMEXT)
            {
                x = ((dynamic)x).Replace(":", " ");
                write_Log(Operators.ConcatenateObject("INFO|registraT24_WSH|ftSwift.gORDERCUNMEXT ", x));
            }

            var ordering_cust_adr_ext = extraeNodosXML(ref des_variables_xml, "ordering_cust_adr_ext");
            var gOrdCuAdExt = new wsT24SwiftIn.FUNDSTRANSFERSWIFTINWSCHEMATypeGORDERCUADEXT();
            if (ordering_cust_adr_ext.Count > 0)
            {
                gOrdCuAdExt.ORDERCUADEXT = ordering_cust_adr_ext.ToArray();
            }
            else
            {
                gOrdCuAdExt.ORDERCUADEXT = new string[] { };
            }
            gOrdCuAdExt.g = "1";
            ftSwift.gORDERCUADEXT = gOrdCuAdExt;
            foreach (var x in gOrdCuAdExt.ORDERCUADEXT)
            {
                x = ((dynamic)x).Replace(":", " ");
                write_Log(Operators.ConcatenateObject("INFO|registraT24_WSH|ftSwift.ORDERCUADEXT ", x));
            }

            var beneficiary_name_ext = extraeNodosXML(ref des_variables_xml, "beneficiary_name_ext");
            var gBenefNameExt = new wsT24SwiftIn.FUNDSTRANSFERSWIFTINWSCHEMATypeGBENEFNAMEEXT();
            if (beneficiary_name_ext.Count > 0)
            {
                gBenefNameExt.BENEFNAMEEXT = beneficiary_name_ext.ToArray();
            }
            else
            {
                gBenefNameExt.BENEFNAMEEXT = new string[] { };
            }

            gBenefNameExt.g = "1";
            ftSwift.gBENEFNAMEEXT = gBenefNameExt;
            foreach (var x in gBenefNameExt.BENEFNAMEEXT)
            {
                x = ((dynamic)x).Replace(":", " ");
                write_Log(Operators.ConcatenateObject("INFO|registraT24_WSH|ftSwift.gBENEFNAMEEXT ", x));
            }

            req.WebRequestCommon = wrc;
            req.OfsFunction = ofsFunction;
            req.FUNDSTRANSFERSWIFTINWSCHEMAType = ftSwift;


            wsT24SwiftIn.SWIFTINWITHSCHEMAResponse response;
            response = wsT24SwiftInRef.wsT24SwiftIn_T24WebServicesImpl_SWIFTINWITHSCHEMA(req);


            write_Log("INFO|registraT24_WSH| Response " + response.Status.successIndicator.ToString);
            if (response.Status.successIndicator == wsT24SwiftIn.successIndicator.Success & !string.IsNullOrEmpty(response.Status.transactionId))
            {
                lsTransactionID = response.Status.transactionId;
                result = true;
                write_Log("INFO|registraT24_WSH| Respuesta exitosa. Se obtuvo el FT " + lsTransactionID);
            }
            else
            {
                lsError = obtieneMensajeError(response.Status.messages);
                result = false;
                write_Log("ERROR|registraT24_WSH|El servicio regresó respuesta con error. Se actualizan tablas de error. " + lsError);
            }

            return result;
        }

        public static bool registraT24_WOSH(T24_MW_TrxMaster clsTrxMaster, T24_MW_TrxDetail clsTrxDetail, string des_variables_xml, ref string lsTransactionID, ref string lsError)
        {
            string company = gsWST24Company;
            string password = gsWST24Password;
            string userName = gsWST24UserName;

            bool result;
            var wsT24SwiftInRef = new wsT24SwiftIn.T24WebServicesImplClient();
            var req = new wsT24SwiftIn.SWIFTINWITHOUTSCHEMARequest();

            var wrc = new wsT24SwiftIn.webRequestCommon();
            wrc.company = company;
            wrc.password = password;
            wrc.userName = userName;

            var ofsFunction = new wsT24SwiftIn.ofsFunction();
            var ftSwift = new wsT24SwiftIn.FUNDSTRANSFERSWIFTINWOSCHEMAType();
            write_Log("INFO|registraT24_WOSH|  ----DATOS ENVIADOS ----  |");

            ftSwift.TRANSACTIONTYPE = clsTrxDetail.transaction_type;
            write_Log("INFO|registraT24_WOSH|ftSwift.TRANSACTIONTYPE " + ftSwift.TRANSACTIONTYPE);

            ftSwift.DEBITACCTNO = clsTrxDetail.debit_acct_no;
            write_Log("INFO|registraT24_WOSH|ftSwift.DEBITACCTNO " + ftSwift.DEBITACCTNO);

            ftSwift.DEBITCURRENCY = clsTrxDetail.debit_currency;
            write_Log("INFO|registraT24_WOSH|ftSwift.DEBITCURRENCY " + ftSwift.DEBITCURRENCY);

            ftSwift.DEBITAMOUNT = clsTrxDetail.debit_amount;
            write_Log("INFO|registraT24_WOSH|ftSwift.DEBITAMOUNT " + ftSwift.DEBITAMOUNT);

            // ftSwift.DEBITVALUEDATE =  busca_valor_xml(des_variables_xml, "settled_date")

            ftSwift.DEBITTHEIRREF = clsTrxDetail.debit_their_ref;
            write_Log("INFO|registraT24_WOSH|ftSwift.DEBITTHEIRREF " + ftSwift.DEBITTHEIRREF);

            ftSwift.CREDITTHEIRREF = clsTrxDetail.credit_their_ref;
            write_Log("INFO|registraT24_WOSH|ftSwift.CREDITTHEIRREF " + ftSwift.CREDITTHEIRREF);

            ftSwift.CREDITACCTNO = clsTrxDetail.credit_acct_no;
            write_Log("INFO|registraT24_WOSH|ftSwift.CREDITACCTNO " + ftSwift.CREDITACCTNO);

            ftSwift.CREDITCURRENCY = clsTrxDetail.credit_currency;
            write_Log("INFO|registraT24_WOSH|ftSwift.CREDITCURRENCY " + ftSwift.CREDITCURRENCY);

            ftSwift.CREDITAMOUNT = clsTrxDetail.credit_amount;

            // ftSwift.CREDITVALUEDATE =  busca_valor_xml(des_variables_xml, "settled_date")

            var gOrdCus = new wsT24SwiftIn.FUNDSTRANSFERSWIFTINWOSCHEMATypeGORDERINGCUST();

            if (busca_valor_xml(des_variables_xml, "mensaje_tipo") == "PACS008")
            {
                var orderinCustNomAddr = extraeNodosXML(ref des_variables_xml, "ordering_name_addr");
                var orderingCustFinal = new List<string>();
                orderingCustFinal.Add("AC" + busca_valor_xml(des_variables_xml, "ordering_account"));
                orderingCustFinal = orderingCustFinal.Concat(orderinCustNomAddr).ToList();

                gOrdCus.ORDERINGCUST = orderingCustFinal.ToArray();
            }
            else
            {
                gOrdCus.ORDERINGCUST = new string[1] { clsTrxDetail.ordering_cust };
            }

            gOrdCus.g = "1";
            ftSwift.gORDERINGCUST = gOrdCus;

            foreach (var x in gOrdCus.ORDERINGCUST)
            {
                x = ((dynamic)x).Replace(":", " ");
                write_Log(Operators.ConcatenateObject("INFO|registraT24_WOSH|ftSwift.ORDERINGCUST ", x));
            }

            var gOrdBank = new wsT24SwiftIn.FUNDSTRANSFERSWIFTINWOSCHEMATypeGORDERINGBANK();
            gOrdBank.ORDERINGBANK = new string[1] { clsTrxDetail.ordering_bank };
            gOrdBank.g = "1";
            ftSwift.gORDERINGBANK = gOrdBank;

            foreach (var x in gOrdBank.ORDERINGBANK)
                write_Log(Operators.ConcatenateObject("INFO|registraT24_WOSH|ftSwift.gORDERINGBANK ", x));

            // Dim gAccWithB As New wsT24SwiftIn.FUNDSTRANSFERSWIFTINWOSCHEMATypeGACCTWITHBANK
            // gAccWithB.ACCTWITHBANK = New String(0) {busca_valor_xml(des_variables_xml, "acct_with_bank")}
            // gAccWithB.g = "1"
            // ftSwift.gACCTWITHBANK = gAccWithB

            // For Each x In gAccWithB.ACCTWITHBANK
            // write_Log("INFO|registraT24_WOSH|ftSwift.ACCTWITHBANK " & x)
            // Next

            // ftSwift.RECEIVERBANK =""

            // Dim gReccorrBank As New wsT24SwiftIn.FUNDSTRANSFERSWIFTINWOSCHEMATypeGRECCORRBANK
            // gReccorrBank.RECCORRBANK = New String(0) {busca_valor_xml(des_variables_xml, "rec_corr_bank")}
            // gReccorrBank.g = "1"
            // ftSwift.gRECCORRBANK = gReccorrBank

            // For Each x In gReccorrBank.RECCORRBANK
            // write_Log("INFO|registraT24_WOSH|ftSwift.gRECCORRBANK " & x)
            // Next

            // Dim gIntBank As New wsT24SwiftIn.FUNDSTRANSFERSWIFTINWOSCHEMATypeGINTERMEDBANK
            // gIntBank.INTERMEDBANK = New String(0) {busca_valor_xml(des_variables_xml, "intermed_bank")}
            // gIntBank.g = "1"
            // ftSwift.gINTERMEDBANK = gIntBank

            // For Each x In gIntBank.INTERMEDBANK
            // write_Log("INFO|registraT24_WOSH|ftSwift.gINTERMEDBANK " & x)
            // Next

            ftSwift.BENOURCHARGES = clsTrxDetail.ben_our_charges;
            write_Log("INFO|registraT24_WOSH|ftSwift.BENOURCHARGES " + ftSwift.BENOURCHARGES);

            // Dim gInSnCorBk As New wsT24SwiftIn.FUNDSTRANSFERSWIFTINWOSCHEMATypeGINSENDCORRBK
            // gInSnCorBk.INSENDCORRBK = New String(0) {busca_valor_xml(des_variables_xml, "in_send_corr_b")}
            // gInSnCorBk.g = "1"
            // ftSwift.gINSENDCORRBK = gInSnCorBk
            // For Each x In gInSnCorBk.INSENDCORRBK
            // write_Log("INFO|registraT24_WOSH|ftSwift.gINSENDCORRBK " & x)
            // Next

            ftSwift.RELATEDREF = clsTrxDetail.related_ref;
            write_Log("INFO|registraT24_WOSH|ftSwift.RELATEDREF " + ftSwift.RELATEDREF);

            int argTotalLineas = 0;
            var instructions = convierteTexto_a_Multivalor_SinCortar_Local(clsTrxDetail.Instructions, 65, TotalLineas: ref argTotalLineas);

            var gInstructions = new wsT24SwiftIn.FUNDSTRANSFERSWIFTINWOSCHEMATypeGINSTRUCTIONS();
            gInstructions.g = "1";
            gInstructions.INSTRUCTIONS = instructions.ToArray();
            ftSwift.gINSTRUCTIONS = gInstructions;

            foreach (var x in gInstructions.INSTRUCTIONS)
                write_Log(Operators.ConcatenateObject("INFO|registraT24_WOSH|ftSwift.INSTRUCTIONS ", x));

            var beneficiaryNameAddr = extraeNodosXML(ref des_variables_xml, "beneficiary_name_addr");
            ftSwift.BENEFICIARYNAM = string.Join(", ", beneficiaryNameAddr);
            write_Log("INFO|registraT24_WOSH|ftSwift.BENEFICIARYNAM " + ftSwift.BENEFICIARYNAM);

            ftSwift.SATELSYSREF = clsTrxDetail.Satel_Sys_Ref;
            write_Log("INFO|registraT24_WOSH|ftSwift.SATELSYSREF " + ftSwift.SATELSYSREF);


            ftSwift.CUSTREF1 = clsTrxDetail.Cust_Ref1;
            ftSwift.CUSTREF2 = clsTrxDetail.Cust_Ref2;
            ftSwift.CUSTREF3 = clsTrxDetail.Cust_Ref3;
            ftSwift.CUSTREF4 = clsTrxDetail.Cust_Ref4;
            ftSwift.CUSTREF5 = clsTrxDetail.Cust_Ref5;

            write_Log("INFO|registraT24_WOSH|ftSwift.CUSTREF1 " + ftSwift.CUSTREF1);
            write_Log("INFO|registraT24_WOSH|ftSwift.CUSTREF2 " + ftSwift.CUSTREF2);
            write_Log("INFO|registraT24_WOSH|ftSwift.CUSTREF3 " + ftSwift.CUSTREF3);
            write_Log("INFO|registraT24_WOSH|ftSwift.CUSTREF4 " + ftSwift.CUSTREF4);
            write_Log("INFO|registraT24_WOSH|ftSwift.CUSTREF5 " + ftSwift.CUSTREF5);

            ftSwift.SWEND2ENDREF = clsTrxDetail.SW_END2END_REF;
            write_Log("INFO|registraT24_WOSH|ftSwift.SWEND2ENDREF " + ftSwift.SWEND2ENDREF);

            var ordering_cust_nm_ext = extraeNodosXML(ref des_variables_xml, "ordering_cust_nm_ext");
            var gOrdCuNmExt = new wsT24SwiftIn.FUNDSTRANSFERSWIFTINWOSCHEMATypeGORDERCUNMEXT();
            if (ordering_cust_nm_ext.Count > 0)
            {
                gOrdCuNmExt.ORDERCUNMEXT = ordering_cust_nm_ext.ToArray();
            }
            else
            {
                gOrdCuNmExt.ORDERCUNMEXT = new string[] { };
            }
            gOrdCuNmExt.g = "1";
            ftSwift.gORDERCUNMEXT = gOrdCuNmExt;
            foreach (var x in gOrdCuNmExt.ORDERCUNMEXT)
            {
                x = ((dynamic)x).Replace(":", " ");
                write_Log(Operators.ConcatenateObject("INFO|registraT24_WOSH|ftSwift.gORDERCUNMEXT ", x));
            }

            var ordering_cust_adr_ext = extraeNodosXML(ref des_variables_xml, "ordering_cust_adr_ext");
            var gOrdCuAdExt = new wsT24SwiftIn.FUNDSTRANSFERSWIFTINWOSCHEMATypeGORDERCUADEXT();
            if (ordering_cust_adr_ext.Count > 0)
            {
                gOrdCuAdExt.ORDERCUADEXT = ordering_cust_adr_ext.ToArray();
            }
            else
            {
                gOrdCuAdExt.ORDERCUADEXT = new string[] { };
            }
            gOrdCuAdExt.g = "1";
            ftSwift.gORDERCUADEXT = gOrdCuAdExt;
            foreach (var x in gOrdCuAdExt.ORDERCUADEXT)
            {
                x = ((dynamic)x).Replace(":", " ");
                write_Log(Operators.ConcatenateObject("INFO|registraT24_WOSH|ftSwift.ORDERCUADEXT ", x));
            }

            var beneficiary_name_ext = extraeNodosXML(ref des_variables_xml, "beneficiary_name_ext");
            var gBenefNameExt = new wsT24SwiftIn.FUNDSTRANSFERSWIFTINWOSCHEMATypeGBENEFNAMEEXT();
            if (beneficiary_name_ext.Count > 0)
            {
                gBenefNameExt.BENEFNAMEEXT = beneficiary_name_ext.ToArray();
            }
            else
            {
                gBenefNameExt.BENEFNAMEEXT = new string[] { };
            }

            gBenefNameExt.g = "1";
            ftSwift.gBENEFNAMEEXT = gBenefNameExt;
            foreach (var x in gBenefNameExt.BENEFNAMEEXT)
            {
                x = ((dynamic)x).Replace(":", " ");
                write_Log(Operators.ConcatenateObject("INFO|registraT24_WOSH|ftSwift.gBENEFNAMEEXT ", x));
            }

            req.WebRequestCommon = wrc;
            req.OfsFunction = ofsFunction;
            req.FUNDSTRANSFERSWIFTINWOSCHEMAType = ftSwift;


            wsT24SwiftIn.SWIFTINWITHOUTSCHEMAResponse response;
            response = wsT24SwiftInRef.wsT24SwiftIn_T24WebServicesImpl_SWIFTINWITHOUTSCHEMA(req);

            write_Log("INFO|registraT24_WOSH | Response " + response.Status.successIndicator.ToString);
            if (response.Status.successIndicator == wsT24SwiftIn.successIndicator.Success & !string.IsNullOrEmpty(response.Status.transactionId))
            {
                lsTransactionID = response.Status.transactionId;
                result = true;
                write_Log("INFO|registraT24_WOSH| Respuesta exitosa. Se obtuvo el FT " + lsTransactionID);
            }
            else
            {
                lsError = obtieneMensajeError(response.Status.messages);
                result = false;
                write_Log("ERROR|registraT24_WOSH|El servicio regresó respuesta con error. Se actualizan tablas de error. " + lsError);
            }

            return result;
        }

        public static List<string> extraeNodosXML(ref string variablesXML, string nombre)
        {
            try
            {
                var result = new List<string>();
                System.Xml.XmlDocument loXML_Doc;
                System.Xml.XmlNodeList loXML_Nodes;

                loXML_Doc = new System.Xml.XmlDocument();
                loXML_Doc.LoadXml(variablesXML);
                if (!ReferenceEquals(loXML_Doc.InnerXml, string.Empty))
                {
                    loXML_Nodes = loXML_Doc.GetElementsByTagName(nombre);
                    if (loXML_Nodes.Count > 0)
                    {
                        foreach (System.Xml.XmlNode loXML_Node in loXML_Nodes[0].ChildNodes)
                            result.Add(loXML_Node.InnerText);
                    }
                }
                return result;
            }
            catch (Exception lexErrorXML)
            {
                throw new Exception("Error al obtener  nodos del XML:" + lexErrorXML.Message);
            }
        }

        private static void ImprimirMasterDetail(T24_MW_TrxMaster clsTrxMaster, T24_MW_TrxDetail clsTrxDetail)
        {
            write_Log("T24_MW_TrxMaster");
            write_Log("T24_MW_TrxMaster.TrxCompany_ID " + clsTrxMaster.TrxCompany_ID);
            write_Log("T24_MW_TrxMaster.TrxInternal_Type " + clsTrxMaster.TrxInternal_Type);
            write_Log("T24_MW_TrxMaster.TrxOperation_Acct " + clsTrxMaster.TrxOperation_Acct);
            write_Log("T24_MW_TrxMaster.TrxOperation_Folio " + clsTrxMaster.TrxOperation_Folio);
            write_Log("T24_MW_TrxMaster.TrxOperation_ID " + clsTrxMaster.TrxOperation_ID);
            write_Log("T24_MW_TrxMaster.TrxOperation_Specific_Type " + clsTrxMaster.TrxOperation_Specific_Type);
            write_Log("T24_MW_TrxMaster.TrxOperation_SubType " + clsTrxMaster.TrxOperation_SubType);
            write_Log("T24_MW_TrxMaster.TrxSystem_ID " + clsTrxMaster.TrxSystem_ID);
            write_Log("T24_MW_TrxMaster.TrxTransaction_Type " + clsTrxMaster.TrxTransaction_Type);
            write_Log("T24_MW_TrxMaster.TrxUser " + clsTrxMaster.TrxUser);

            write_Log("T24_MW_TrxDetail");
            write_Log("T24_MW_TrxDetail.ben_our_charges " + clsTrxDetail.ben_our_charges);
            write_Log("T24_MW_TrxDetail.Beneficiary_Name " + clsTrxDetail.Beneficiary_Name);
            write_Log("T24_MW_TrxDetail.commission_type " + clsTrxDetail.commission_type);
            write_Log("T24_MW_TrxDetail.credit_acct_no " + clsTrxDetail.credit_acct_no);
            write_Log("T24_MW_TrxDetail.credit_currency " + clsTrxDetail.credit_currency);
            write_Log("T24_MW_TrxDetail.credit_their_ref " + clsTrxDetail.credit_their_ref);
            write_Log("T24_MW_TrxDetail.Cust_Ref1 " + clsTrxDetail.Cust_Ref1);
            write_Log("T24_MW_TrxDetail.Cust_Ref2 " + clsTrxDetail.Cust_Ref2);
            write_Log("T24_MW_TrxDetail.Cust_Ref3 " + clsTrxDetail.Cust_Ref3);
            write_Log("T24_MW_TrxDetail.Cust_Ref4 " + clsTrxDetail.Cust_Ref4);
            write_Log("T24_MW_TrxDetail.Cust_Ref5 " + clsTrxDetail.Cust_Ref5);
            write_Log("T24_MW_TrxDetail.debit_acct_no " + clsTrxDetail.debit_acct_no);
            write_Log("T24_MW_TrxDetail.debit_amount " + clsTrxDetail.debit_amount);
            write_Log("T24_MW_TrxDetail.debit_currency " + clsTrxDetail.debit_currency);
            write_Log("T24_MW_TrxDetail.debit_their_ref " + clsTrxDetail.debit_their_ref);
            write_Log("T24_MW_TrxDetail.Instructions " + clsTrxDetail.Instructions);
            write_Log("T24_MW_TrxDetail.ordering_bank " + clsTrxDetail.ordering_bank);
            write_Log("T24_MW_TrxDetail.ordering_cust " + clsTrxDetail.ordering_cust);
            write_Log("T24_MW_TrxDetail.related_ref " + clsTrxDetail.related_ref);
            write_Log("T24_MW_TrxDetail.Satel_Sys_Ref " + clsTrxDetail.Satel_Sys_Ref);
            write_Log("T24_MW_TrxDetail.SW_END2END_REF " + clsTrxDetail.SW_END2END_REF);
            write_Log("T24_MW_TrxDetail.transaction_type " + clsTrxDetail.transaction_type);
        }

        private static string obtieneMensajeError(string[] arrayError)
        {
            string messageGeneralError = string.Empty;
            if (arrayError.Length > 0)
            {
                for (short cnt = 0, loopTo = (short)(arrayError.Length - 1); cnt <= loopTo; cnt += 1)
                {
                    messageGeneralError += arrayError[cnt];
                    if (cnt != arrayError.Length - 1)
                    {
                        messageGeneralError += "|";
                    }
                }
            }
            return messageGeneralError;
        }


        private static void LimpiarCamposDetail(ref T24_MW_TrxDetail clsTrxDetail)
        {
            Type _type = clsTrxDetail.GetType;
            System.Reflection.PropertyInfo[] propertiesList = _type.GetProperties();

            foreach (System.Reflection.PropertyInfo prop in propertiesList)
            {
                if (ReferenceEquals(prop.PropertyType, typeof(string)))
                {
                    if (prop.GetValue(clsTrxDetail, default) is not null)
                    {
                        prop.SetValue(clsTrxDetail, prop.GetValue(clsTrxDetail, default).Replace(",", "?").Replace('"', "|").Replace("/", "^"), default);
                    }
                }
            }
            clsTrxDetail.Instructions = clsTrxDetail.Instructions.Replace(":", " ");
        }

        private static void LimpiarCamposXMLVariables(ref string des_variables_xml)
        {
            var doc = new System.Xml.XmlDocument();
            doc.LoadXml(des_variables_xml);

            foreach (System.Xml.XmlElement el in doc.SelectNodes("//*[not(*)]"))
                el.InnerText = el.InnerText.Replace(",", "?").Replace(""", "|").Replace("/", "^");

            des_variables_xml = doc.OuterXml;
        }

        public static Result GetNostro(string currency, string bic)
        {
            if (string.IsNullOrWhiteSpace(bic))
            {
                return Result<string>.Failed("No se suplió un BIC Beneficiario, posible error en registro del beneficiario.");
            }

            DbDataReader reader = default;
            string bicToSearch = bic;
            try
            {
                write_Log("INFO|Comunes.procesaOperacion|GetNostro|A sanitizar el BIC: " + bicToSearch);
                bicToSearch = SanitizeBic11(bicToSearch);
                write_Log("INFO|Comunes.procesaOperacion|GetNostro|BIC sanitizado: " + bicToSearch);
                write_Log("INFO|Comunes.procesaOperacion|GetNostro|A buscar la cuenta de crédito para '" + bicToSearch + "' en la moneda " + currency);
                string query = "SELECT TOP 1 NostroAccountNumber FROM NostroAccounts WHERE NostroAccountIdentifier='" + bicToSearch + "' AND NostroAccountCurrency='" + currency + "' AND IsActive=1";
                reader = goTOMI_Database.Execute_Query(query);
                if (reader == null)
                {
                    write_Log("INFO|Comunes.procesaOperacion|GetNostro|No se pudo generar el DataReader para la consulta.");
                    return Result<string>.Failed("No fue posible hacer la consulta al cátalogo de cuentas NOSTRO.");
                }

                if (!reader.Read())
                {
                    write_Log("INFO|Comunes.procesaOperacion|GetNostro|No se encontró ningún registro para la consulta.");
                    return Result<string>.Success(string.Empty);
                }
                string account = reader.Item("NostroAccountNumber");
                return Result<string>.Success(account);
            }
            finally
            {
                if (!(reader == null))
                {
                    reader.Dispose();
                }
                reader = default;
            }
        }

        private static string SanitizeBic11(string bic)
        {
            if (string.IsNullOrWhiteSpace(bic))
            {
                return string.Empty;
            }

            if (bic.Length == 8)
            {
                return bic + "XXX";
            }

            if (bic.Length == 11)
            {
                if (bic.Substring(0, 3) == "SW-")
                {
                    bic = bic.Substring(3);
                    return bic + "XXX";
                }
                return bic;
            }

            if (bic.Substring(0, 3) == "SW-")
            {
                bic = bic.Substring(3);
                return bic;
            }

            return string.Empty;
        }

    }
}
