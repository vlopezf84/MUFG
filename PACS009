using System;
using System.Collections.Generic;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;

namespace migrac
{

    public class PACS009
    {
        private const string tipoOperacion = "PACS009";
        private static T24_MW_Connection.MW_Tipo_operacion goMW_TipoOperacion;
        // Private Shared folio_unico As String = ""

        public static bool procesaOperacion(string icn, Dictionary<string, object> datos)
        {
            string lsAliasProceso;
            bool lbProcesado;
            string lsCuentaVostroBene;

            // Confirmo que se encuentre el certificado y llave para la firma digital de lo contrario no se inicia el proceso
            write_Log("INFO|" + tipoOperacion + ".procesaOperacion|Confirmando que el certificado se encuentre.");
            if (!CertificadoEncontrado())
            {
                throw new Exception("Error en procesamiento de SPEI: No se encontro el certificado y/o llave para realizar la firma de la transacción");
            }

            write_Log(Operators.ConcatenateObject(Operators.ConcatenateObject("INFO|" + tipoOperacion + ".procesaOperacion|Iniciando el registro de la operación, folio_unico='", datos["folio_unico"]), "'."));

            // Tipo de Operacion
            goMW_TipoOperacion = goT24_Connection.MW_DatosOperacion("SWF_IN");

            // Proceso a ejecutar
            lsAliasProceso = dameUltimoProceso_SWF(goTOMI_Database, icn, gsTipoOperacion);

            // ' Registro de la operación en T24
            if (lsAliasProceso == "SPEI_REGISTRO")
            {
                write_Log("INFO|" + tipoOperacion + ".procesaOperacion|A registrar operación en SPEI (si aplica).");

                // Inicio el proceso
                iniciaProceso_SWF(goTOMI_Database, icn, gsTipoOperacion, lsAliasProceso);

                // Valido el tipo de operacion PACS009 (hay caso para salida SPEI y caso de traspaso entre cuentas vostro internas)
                lsCuentaVostroBene = busca_valor_xml(datos["des_variables_xml"], "btmum_cta_vostro_vostro");
                if (string.IsNullOrEmpty(lsCuentaVostroBene))
                {
                    // '''' SPEI
                    write_Log("INFO|" + tipoOperacion + ".procesaOperacion|A registrar operación en SPEI.");
                    // SPEI
                    lbProcesado = registra_SPEI(icn, ref datos);

                    if (lbProcesado == false & !(gexUltimaExcepcion == null))
                    {
                        throw gexUltimaExcepcion;
                    }

                    if (!lbProcesado)
                    {
                        // No se registro la operacion SPEI
                        throw new Exception("No se pudo registrar la operación en SPEI");
                    }
                }
                else
                {
                    // '''' Traspaso
                    write_Log("INFO|" + tipoOperacion + ".procesaOperacion|No aplica el registrar operación en SPEI.");
                }

                // Termino del proceso
                terminaProceso_SWF(goTOMI_Database, icn, gsTipoOperacion, "SPEI_REGISTRO");

                // Nuevo alias del proceso
                lsAliasProceso = dameUltimoProceso_SWF(goTOMI_Database, icn, gsTipoOperacion);
            }

            // ' Registro de la operación en T24
            if (lsAliasProceso == "T24_REGISTRO")
            {
                write_Log("INFO|" + tipoOperacion + ".procesaOperacion|A registrar operación en T24.");

                // Inicio el proceso
                iniciaProceso_SWF(goTOMI_Database, icn, gsTipoOperacion, lsAliasProceso);

                // Valido el tipo de operacion PACS009 (hay caso para salida SPEI y caso de traspaso entre cuentas vostro internas)
                lsCuentaVostroBene = busca_valor_xml(datos["des_variables_xml"], "btmum_cta_vostro_vostro");
                if (string.IsNullOrEmpty(lsCuentaVostroBene))
                {
                    // '''' SPEI
                    // Valido la operacion en T24
                    write_Log("INFO|" + tipoOperacion + ".procesaOperacion|A registrar operación en T24 con salida SPEI.");
                    lbProcesado = T24_REGISTRO(icn, datos);
                    if (lbProcesado == false & !(gexUltimaExcepcion == null))
                    {
                        throw gexUltimaExcepcion;
                    }
                    if (!lbProcesado)
                    {
                        throw new Exception("Error en procesamiento de registro PACS009 T24_REGISTRO con folio: " + icn);
                    }
                }
                else
                {
                    // '''' Traspaso
                    write_Log("INFO|" + tipoOperacion + ".procesaOperacion|A registrar operación en T24 como traspaso entre VOSTROS.");
                    lbProcesado = T24_REGISTRO_VOSTROS(icn, datos);
                    if (lbProcesado == false & !(gexUltimaExcepcion == null))
                    {
                        throw gexUltimaExcepcion;
                    }
                    if (!lbProcesado)
                    {
                        throw new Exception("Error en procesamiento de registro PACS009 T24_REGISTRO_VOSTROS con folio: " + icn);
                    }
                }
            }

            // Conciliación
            if (lsAliasProceso == "CONCILIAR")
            {
                string lsFolioT24 = string.Empty;
                bool lbEs_Igual_en_T24;
                string lsMoneda;
                DbDataReader lrsDatos;
                string lsCuentaCompletaVostro;
                string[] laCuentaSeparadaVostro;
                string lsCuentaDeb;
                string lsBen_Subaplicacion;
                string lsBen_Cuenta;

                write_Log("INFO|" + tipoOperacion + ".procesaOperacion|A conciliar operaciones (por estatus) entre TOMI y T24.");
                iniciaProceso_SWF(goTOMI_Database, icn, gsTipoOperacion, lsAliasProceso);
                write_Log(Operators.ConcatenateObject("INFO|Folio Unico ", datos["folio_unico"]));

                // Busco la operacion en T24
                lrsDatos = goTOMI_Database.Execute_Query(Operators.ConcatenateObject(Operators.ConcatenateObject("SELECT T24_TRANSACTION_ID FROM TB_SRV_SWF_TRABAJO_MX WHERE NF_FOLIO_UNICO = '", datos["folio_unico"]), "'"));
                if (!(lrsDatos == null))
                {
                    while (lrsDatos.Read)
                    {
                        if (!(lrsDatos("T24_TRANSACTION_ID") is DBNull))
                        {
                            lsFolioT24 = lrsDatos("T24_TRANSACTION_ID").ToString;
                        }
                    }
                    lrsDatos.Close();
                    lrsDatos = default;
                }

                if (lsFolioT24 == null)
                {
                    throw new Exception(Conversions.ToString(Operators.ConcatenateObject(Operators.ConcatenateObject("No existe folio asignado para el folio_unico='", datos["folio_unico"]), "'")));
                }

                // Valida contra los datos de TOMI - T24
                lbEs_Igual_en_T24 = false;
                lsMoneda = goT24_Connection.valida_moneda(datos["cve_moneda"]);

                // Ordenante
                lsCuentaCompletaVostro = busca_valor_xml(datos["des_variables_xml"], "btmum_cta_vostro_emisor");
                laCuentaSeparadaVostro = lsCuentaCompletaVostro.Split("-");
                lsCuentaDeb = laCuentaSeparadaVostro[2];      // datos("num_cuenta")

                // Beneficiario
                lsCuentaVostroBene = busca_valor_xml(datos["des_variables_xml"], "btmum_cta_vostro_vostro");
                if (string.IsNullOrEmpty(lsCuentaVostroBene))
                {
                    // '''' SPEI
                    lsBen_Cuenta = goT24_Connection.T24_BanxicoAcct;
                }
                else
                {
                    // '''' Traspaso
                    laCuentaSeparadaVostro = lsCuentaVostroBene.Split("-");
                    lsBen_Subaplicacion = laCuentaSeparadaVostro[1];
                    lsBen_Cuenta = laCuentaSeparadaVostro[2];
                }

                lrsDatos = goVistasT24_Database.Execute_Query("SELECT CUR_ID,DEBIT_ACCT_NO,DEBIT_CURRENCY,DEBIT_AMOUNT,CREDIT_ACCT_NO,SATEL_SYS_REF FROM VW_T24_FUNDS_TRANSFER_ID WHERE CUR_ID = '" + lsFolioT24 + "'");
                if (!(lrsDatos == null))
                {
                    while (lrsDatos.Read)
                    {
                        if (lsFolioT24 == lrsDatos.Item("CUR_ID") & Operators.ConditionalCompareObjectEqual(datos["folio_unico"], lrsDatos.Item("SATEL_SYS_REF"), false) & Operators.ConditionalCompareObjectEqual(datos["des_importe"], lrsDatos.Item("DEBIT_AMOUNT"), false) & lsMoneda == lrsDatos.Item("DEBIT_CURRENCY") & lsCuentaDeb == lrsDatos.Item("DEBIT_ACCT_NO") & lsBen_Cuenta == lrsDatos.Item("CREDIT_ACCT_NO"))
                        {
                            lbEs_Igual_en_T24 = true;
                        }
                    }
                    lrsDatos.Close();
                    lrsDatos = default;
                }

                if (!lbEs_Igual_en_T24)
                {
                    throw new Exception("Los datos de conciliación entre TOMI y T24 son diferentes");
                }

                // Actualizo el estatus
                terminaProceso_SWF(goTOMI_Database, icn, gsTipoOperacion, lsAliasProceso);

                // Marca la operación como finalizada total
                migrac.Comunes.marca_op_terminada(icn, "PROC", "JEAI");

                // Verificamos la última operación no realizada
                lsAliasProceso = "";
            }

            // Termina el proceso del folio
            return true;
        }

        // Inserta registro en T24
        private static bool T24_REGISTRO(string icn, Dictionary<string, object> datos)
        {
            try
            {
                T24_MW_TrxMaster loTrxMaster = default;
                T24_MW_TrxDetail loTrxDetailFT = default;
                string lsMoneda;
                string lsDescripcion;
                string lsBanco;
                string lsNombre_Beneficiario;
                string lsNumero_Cuenta_Beneficiario;
                string lsCuentaCompletaVostro;
                string[] laCuentaSeparadaVostro;
                string lsCuentaDeb;
                bool lbRegreso;
                string lsSW_END2END_REF;
                string lsSLA_UETR;

                write_Log("INFO|" + tipoOperacion + ".T24_REGISTRO|Inicia registro en T24.");

                // Inicio de variables
                lsMoneda = goT24_Connection.valida_moneda(datos["cve_moneda"]);
                lsDescripcion = busca_valor_xml(datos["des_variables_xml"], "related_reference");
                lsBanco = busca_valor_xml(datos["des_variables_xml"], "btmum_cve_casfim_spei") + " - " + busca_valor_xml(datos["des_variables_xml"], "btmum_nombre_banco_spei");
                lsNombre_Beneficiario = busca_valor_xml(datos["des_variables_xml"], "btmum_nombre_banco_spei");
                lsNumero_Cuenta_Beneficiario = busca_valor_xml(datos["des_variables_xml"], "btmum_cve_casfim_spei");
                lsCuentaCompletaVostro = busca_valor_xml(datos["des_variables_xml"], "btmum_cta_vostro_emisor");
                laCuentaSeparadaVostro = lsCuentaCompletaVostro.Split("-");
                lsCuentaDeb = laCuentaSeparadaVostro[2];      // datos("num_cuenta")
                                                              // Armado de la descricpión
                lsDescripcion = "RECEPCION TRANSFERENCIA INTERNACIONAL PACS009 SALIDA SPEI.";
                if (busca_valor_xml(datos["des_variables_xml"], "btmum_nombre_emisor") != "")
                {
                    lsDescripcion += ", BANCO ORIGEN: " + busca_valor_xml(datos["des_variables_xml"], "btmum_nombre_emisor");
                }
                // Vostro
                if (busca_valor_xml(datos["des_variables_xml"], "btmum_nombre_vostro") != "")
                {
                    lsDescripcion += ", BANCO DESTINO: " + busca_valor_xml(datos["des_variables_xml"], "btmum_nombre_vostro");
                }
                // SPEI
                if (busca_valor_xml(datos["des_variables_xml"], "btmum_cve_casfim_spei") != "")
                {
                    lsDescripcion += ", PAGO SPEI A: " + busca_valor_xml(datos["des_variables_xml"], "btmum_cve_casfim_spei") + "-" + busca_valor_xml(datos["des_variables_xml"], "btmum_nombre_banco_spei");
                }
                // Referencia
                if (busca_valor_xml(datos["des_variables_xml"], "related_reference") != "")
                {
                    lsDescripcion += ", REL. REFERENCE: " + busca_valor_xml(datos["des_variables_xml"], "related_reference");
                }

                // Validación de la moneda
                if (lsMoneda != goT24_Connection.MonedaDefaultMN)
                {
                    throw new Exception("No hay referencia del mensaje PACS009 para la moneda '" + lsMoneda + "'.");
                }

                // Prepatamos los datos para el registro del FT
                loTrxMaster = new T24_MW_TrxMaster();
                // .TrxCompany_ID = T24_MW_Connection.MW_CompanyId
                // .TrxSystem_ID = T24_MW_Connection.MW_SystemId
                loTrxMaster.TrxOperation_Specific_Type = "SWF_IN";
                loTrxMaster.TrxOperation_SubType = "PACS009_SPEI";
                loTrxMaster.TrxOperation_Folio = icn;
                loTrxMaster.TrxOperation_Acct = lsCuentaDeb;

                loTrxDetailFT = new T24_MW_TrxDetail();
                loTrxDetailFT.debit_acct_no = lsCuentaDeb;
                loTrxDetailFT.debit_currency = lsMoneda;
                loTrxDetailFT.debit_amount = string.Format("{0:0.##}", datos["des_importe"]);
                loTrxDetailFT.debit_their_ref = busca_valor_xml(datos["des_variables_xml"], "sender_reference");
                loTrxDetailFT.credit_their_ref = busca_valor_xml(datos["des_variables_xml"], "sender_reference");
                loTrxDetailFT.credit_acct_no = goT24_Connection.T24_BanxicoAcct;
                loTrxDetailFT.credit_currency = lsMoneda;
                // .credit_amount = lrsDatos.Item("nf_monto_enviar")
                // .ben_acct_no = lsNumero_Cuenta_Beneficiario
                // .ben_customer = lsNombre_Beneficiario
                // .payment_details = lsDescripcion
                loTrxDetailFT.ordering_cust = busca_valor_xml(datos["des_variables_xml"], "btmum_nombre_emisor");
                loTrxDetailFT.related_ref = busca_valor_xml(datos["des_variables_xml"], "sender_reference");
                loTrxDetailFT.Instructions = lsDescripcion;   // goT24_Connection.convierteTexto_a_Multivalor(lsDescripcion, 65)
                loTrxDetailFT.Satel_Sys_Ref = datos["folio_unico"];
                loTrxDetailFT.folio_tomi = datos["folio_unico"];

                loTrxDetailFT.Beneficiary_Name = busca_valor_xml(datos["des_variables_xml"], "btmum_nombre_banco_spei");
                lsSW_END2END_REF = busca_valor_xml(datos["des_variables_xml"], "UETR").Trim;
                if (!string.IsNullOrEmpty(lsSW_END2END_REF))
                {
                    lsSLA_UETR = busca_valor_xml(datos["des_variables_xml"], "SLA_UETR").Trim;
                    // If lsSLA_UETR <> "" Then
                    // lsSW_END2END_REF &= " " & lsSLA_UETR
                    // End If
                    loTrxDetailFT.SW_END2END_REF = lsSW_END2END_REF;
                }

                // Realización del giro
                // lbRegreso = goT24_Connection.registra_FT(goVistasT24_Database, datos("folio_unico"), gsFechaSistema_T24_Juliana, gsTablaTrabajo, icn, "SWF", loTrxMaster, loTrxDetailFT)
                lbRegreso = migrac.Comunes.registra_TRX_WS(datos["folio_unico"], goMW_TipoOperacion.tabla_trabajo, "SWF_IN", icn, "PACS009", ref loTrxMaster, ref loTrxDetailFT, datos["des_variables_xml"]);

                // If lbRegreso Then
                // 'Registra_SPEI_Participantes(icn, datos)
                // actualiza_operacion(icn)
                // End If
                return lbRegreso;
            }
            catch (Exception lexErrorReg009SPEI)
            {
                write_Log("ERROR|" + tipoOperacion + ".T24_REGISTRO|Se presenta exception: " + lexErrorReg009SPEI.ToString());
                gexUltimaExcepcion = lexErrorReg009SPEI;
            }
            return false;
        }

        // Inserta registro en T24 para traspaso entre cuentas VOSTRO
        private static bool T24_REGISTRO_VOSTROS(string icn, Dictionary<string, object> datos)
        {
            try
            {
                T24_MW_TrxMaster loTrxMaster = default;
                T24_MW_TrxDetail loTrxDetailFT = default;
                string lsMoneda;
                string lsDescripcion;
                string lsCuentaCompletaVostro;
                string[] laCuentaSeparadaVostro;
                string lsOrd_Subaplicacion;
                string lsOrd_Cuenta;
                string lsOrd_Nombre;
                string lsBen_Subaplicacion;
                string lsBen_Cuenta;
                string lsBen_Nombre;
                bool lbRegreso;
                string lsSW_END2END_REF;
                string lsSLA_UETR;

                lsMoneda = goT24_Connection.valida_moneda(datos["cve_moneda"]);
                // Ordenante
                lsCuentaCompletaVostro = busca_valor_xml(datos["des_variables_xml"], "btmum_cta_vostro_emisor");
                laCuentaSeparadaVostro = lsCuentaCompletaVostro.Split("-");
                lsOrd_Subaplicacion = laCuentaSeparadaVostro[1];
                lsOrd_Cuenta = laCuentaSeparadaVostro[2];
                lsOrd_Nombre = busca_valor_xml(datos["des_variables_xml"], "btmum_nombre_emisor");
                // Beneficiario
                lsCuentaCompletaVostro = busca_valor_xml(datos["des_variables_xml"], "btmum_cta_vostro_vostro");
                laCuentaSeparadaVostro = lsCuentaCompletaVostro.Split("-");
                lsBen_Subaplicacion = laCuentaSeparadaVostro[1];
                lsBen_Cuenta = laCuentaSeparadaVostro[2];
                lsBen_Nombre = busca_valor_xml(datos["des_variables_xml"], "btmum_nombre_vostro");
                // Armado de la descricpión
                lsDescripcion = "RECEPCION TRANSFERENCIA INTERNACIONAL PACS009 VOSTROS.";
                if (busca_valor_xml(datos["des_variables_xml"], "btmum_nombre_emisor") != "")
                {
                    lsDescripcion += ", BANCO ORIGEN: " + busca_valor_xml(datos["des_variables_xml"], "btmum_nombre_emisor");
                }
                // Vostro
                if (busca_valor_xml(datos["des_variables_xml"], "btmum_nombre_vostro") != "")
                {
                    lsDescripcion += ", BANCO DESTINO: " + busca_valor_xml(datos["des_variables_xml"], "btmum_nombre_vostro");
                }
                // SPEI
                if (busca_valor_xml(datos["des_variables_xml"], "btmum_cve_casfim_spei") != "")
                {
                    lsDescripcion += ", PAGO SPEI A: " + busca_valor_xml(datos["des_variables_xml"], "btmum_cve_casfim_spei") + "-" + busca_valor_xml(datos["des_variables_xml"], "btmum_nombre_banco_spei");
                }
                // Referencia
                if (busca_valor_xml(datos["des_variables_xml"], "related_reference") != "")
                {
                    lsDescripcion += ", REL. REFERENCE: " + busca_valor_xml(datos["des_variables_xml"], "related_reference");
                }

                // Prepatamos los datos para el registro del FT
                loTrxMaster = new T24_MW_TrxMaster();
                // .TrxCompany_ID = T24_MW_Connection.MW_CompanyId
                // .TrxSystem_ID = T24_MW_Connection.MW_SystemId
                loTrxMaster.TrxOperation_Specific_Type = "SWF_IN";
                loTrxMaster.TrxOperation_SubType = "PACS009_VOSTROS";
                loTrxMaster.TrxOperation_Folio = icn;
                loTrxMaster.TrxOperation_Acct = lsOrd_Cuenta;

                loTrxDetailFT = new T24_MW_TrxDetail();
                loTrxDetailFT.debit_acct_no = lsOrd_Cuenta;
                loTrxDetailFT.debit_currency = lsMoneda;
                loTrxDetailFT.debit_amount = string.Format("{0:0.##}", datos["des_importe"]);
                loTrxDetailFT.debit_their_ref = busca_valor_xml(datos["des_variables_xml"], "sender_reference");
                loTrxDetailFT.credit_their_ref = busca_valor_xml(datos["des_variables_xml"], "sender_reference");
                loTrxDetailFT.credit_acct_no = lsBen_Cuenta;
                loTrxDetailFT.credit_currency = lsMoneda;
                // .payment_details = lsDescripcion
                loTrxDetailFT.related_ref = busca_valor_xml(datos["des_variables_xml"], "sender_reference");
                loTrxDetailFT.Instructions = lsDescripcion;   // goT24_Connection.convierteTexto_a_Multivalor(lsDescripcion, 65)
                loTrxDetailFT.Satel_Sys_Ref = datos["folio_unico"];
                loTrxDetailFT.folio_tomi = datos["folio_unico"];
                loTrxDetailFT.Beneficiary_Name = busca_valor_xml(datos["des_variables_xml"], "btmum_nombre_vostro");
                lsSW_END2END_REF = busca_valor_xml(datos["des_variables_xml"], "UETR").Trim;
                if (!string.IsNullOrEmpty(lsSW_END2END_REF))
                {
                    lsSLA_UETR = busca_valor_xml(datos["des_variables_xml"], "SLA_UETR").Trim;
                    // If lsSLA_UETR <> "" Then
                    // lsSW_END2END_REF &= " " & lsSLA_UETR
                    // End If
                    loTrxDetailFT.SW_END2END_REF = lsSW_END2END_REF;
                }

                // Realización del FT
                // lbRegreso = goT24_Connection.registra_FT(goVistasT24_Database, datos("folio_unico"), gsFechaSistema_T24_Juliana, gsTablaTrabajo, icn, "SWF", loTrxMaster, loTrxDetailFT)
                lbRegreso = migrac.Comunes.registra_TRX_WS(datos["folio_unico"], goMW_TipoOperacion.tabla_trabajo, "SWF_IN", icn, "PACS009", ref loTrxMaster, ref loTrxDetailFT, datos["des_variables_xml"]);
                // If lbRegreso Then
                // 'Registra_SPEI_Participantes(icn, datos)
                // actualiza_operacion(icn)
                // End If

                return lbRegreso;
            }
            catch (Exception lexErrorReg009Vostros)
            {
                write_Log("ERROR|" + tipoOperacion + ".T24_REGISTRO_VOSTROS|Se presenta exception: " + lexErrorReg009Vostros.ToString());
                gexUltimaExcepcion = lexErrorReg009Vostros;
            }
            return false;
        }

        private static bool registra_SPEI(string icn, ref Dictionary<string, object> datos)
        {
            MSSQL_Database loSPEI_Database;
            DbDataReader lrsDatos_SPEI;
            DbDataReader lrsDatos;
            string lsCadena_Regreso = string.Empty;
            int liTipoPago;
            int liTipoCuenta;
            int liRefNumerica;
            string lsConcepto;
            string lsNomBeneficiario;

            write_Log("INFO|registra_SPEI|A registrar pago SPEI.");

            if (busca_valor_xml(datos["des_variables_xml"], "btmum_registro_SPEI") == "PROC")
            {
                write_Log("INFO|registra_SPEI|El pago ya fue registrado en SPEI.");
                return true;
            }

            // Tipo de pago SPEI
            liTipoPago = 3;
            liTipoCuenta = 4;
            write_Log("INFO|registra_SPEI|A registrar en SPEI para el tipo de pago=" + liTipoPago + ".");
            switch (liTipoPago)
            {
                case 3:
                    {
                        write_Log("INFO|registra_SPEI|Tercero a tercero vostro.");
                        break;
                    }
                case 5:
                    {
                        write_Log("INFO|registra_SPEI|Participante a tercero.");
                        break;
                    }
                case 6:
                    {
                        write_Log("INFO|registra_SPEI|Participante a vostro.");
                        break;
                    }
                case 7:
                    {
                        write_Log("INFO|registra_SPEI|Participante a participante.");
                        break;
                    }

                default:
                    {
                        throw new Exception("No existe definición para pago SPEI del tipo de pago " + liTipoPago);
                    }
            }

            // Inicio base SPEI
            loSPEI_Database = new MSSQL_Database("SPEI");
            write_Log("INFO|registra_SPEI|Base SPEI en [" + loSPEI_Database.getDataBaseName() + " on " + loSPEI_Database.getServerName() + "] iniciada correctamente.");

            // Valores TAS - SPEI
            liRefNumerica = goT24_Connection.Clave_CASFIM;
            if (busca_valor_xml(datos["des_variables_xml"], "related_reference") != "" & Information.IsNumeric(busca_valor_xml(datos["des_variables_xml"], "related_reference")))
            {
                string lsValorTmp;

                lsValorTmp = busca_valor_xml(datos["des_variables_xml"], "related_reference");
                if (Information.IsNumeric(lsValorTmp))
                {
                    if (lsValorTmp.Length > 7)
                    {
                        lsValorTmp = Strings.Right(lsValorTmp, 7);
                    }
                    liRefNumerica = Conversions.ToInteger(lsValorTmp);
                }
            }
            lsConcepto = "FROM " + busca_valor_xml(datos["des_variables_xml"], "btmum_nombre_emisor");

            // Proceso para Generar la firma digital
            if (!GeneraFirmaDigital(datos, liTipoPago, "TB_SRV_SWF_TRABAJO_MX", icn))
            {
                throw new Exception("Se presentó un error al generar la firma digital del folio: " + icn);
            }

            // Definición de Procedimiento Almacenado
            DbCommand loCmd = loSPEI_Database.newCommand("sp_InterfaceTOMI_SPEI_" + liTipoPago);
            loCmd.CommandType = CommandType.StoredProcedure;
            // Definición de parámetros
            loCmd.Parameters.Clear();
            // Parametro 1
            DbParameter lpIns_clave = loCmd.CreateParameter();
            lpIns_clave.ParameterName = "@ins_clave";
            lpIns_clave.DbType = DbType.Int64;
            lpIns_clave.Direction = ParameterDirection.Input;
            lpIns_clave.Value = busca_valor_xml(datos["des_variables_xml"], "btmum_cve_casfim_spei");
            loCmd.Parameters.Add(lpIns_clave);
            // Parametro 2
            DbParameter lpOp_monto = loCmd.CreateParameter();
            lpOp_monto.ParameterName = "@op_monto";
            lpOp_monto.DbType = DbType.Decimal;
            lpOp_monto.Direction = ParameterDirection.Input;
            lpOp_monto.Value = datos["des_importe"];
            loCmd.Parameters.Add(lpOp_monto);
            // Parametro 3
            DbParameter lpOp_cve_rastreo = loCmd.CreateParameter();
            lpOp_cve_rastreo.ParameterName = "@op_cve_rastreo";
            lpOp_cve_rastreo.DbType = DbType.String;
            lpOp_cve_rastreo.Size = 30;
            lpOp_cve_rastreo.Direction = ParameterDirection.Input;
            lpOp_cve_rastreo.Value = busca_valor_xml(datos["des_variables_xml"], "sender_reference");
            loCmd.Parameters.Add(lpOp_cve_rastreo);
            // De acuerdo al tipo de pago son los siguientes parametros
            if (liTipoPago != 7) // No enviar los parametros para Participante - Participante
            {
                // Nombre del beneficiario
                lsNomBeneficiario = busca_valor_xml(datos["des_variables_xml"], "btmum_nombre_banco_spei");  // Nombre del banco beneficiario (por default)
                var beneficiaryIdentifier = busca_valor_xml(datos["des_variables_xml"], "ben_int_cif");
                string queryBankName = "SELECT des_nombre FROM tb_srv_swf_cat_cif_datos WHERE ";
                if (beneficiaryIdentifier != "")
                {
                    if (EsSWIFT(beneficiaryIdentifier))
                    {
                        if (beneficiaryIdentifier.Length == 8) // El BIC tiene 8 caracteres entonces no tiene branch, se busca limpio y con <bic>XXX.
                        {
                            queryBankName = queryBankName + "cve_swift='" + beneficiaryIdentifier + "XXX' OR ";
                        }
                        lrsDatos = goTOMI_Database.Execute_Query(queryBankName + "cve_swift='" + beneficiaryIdentifier + "'");
                    }
                    else
                    {
                        lrsDatos = goTOMI_Database.Execute_Query(queryBankName + "num_cif=" + beneficiaryIdentifier);
                    }
                    if (!(lrsDatos == null))
                    {
                        while (lrsDatos.Read)
                            lsNomBeneficiario = lrsDatos("des_nombre");
                        lrsDatos.Close();
                        lrsDatos = default;
                    }
                }

                var orderingCustomerName = busca_valor_xml(datos["des_variables_xml"], "btmum_nombre_emisor");
                DbParameter lpOp_nom_ord = loCmd.CreateParameter();
                lpOp_nom_ord.ParameterName = "@op_nom_ord";
                lpOp_nom_ord.DbType = DbType.String;
                lpOp_nom_ord.Size = 40;
                lpOp_nom_ord.Direction = ParameterDirection.Input;
                lpOp_nom_ord.Value = texto_SPEI(orderingCustomerName);
                loCmd.Parameters.Add(lpOp_nom_ord);

                var rawAccount = busca_valor_xml(datos["des_variables_xml"], "btmum_cta_vostro_emisor");
                var orderingAccount = rawAccount.Replace("-", ""); // Se le quitan los guiones a la cuenta vostro.
                DbParameter lpOp_cuenta_ord = loCmd.CreateParameter();
                lpOp_cuenta_ord.ParameterName = "@op_cuenta_ord";
                lpOp_cuenta_ord.DbType = DbType.String;
                lpOp_cuenta_ord.Size = 20;
                lpOp_cuenta_ord.Direction = ParameterDirection.Input;
                lpOp_cuenta_ord.Value = texto_SPEI(orderingAccount);
                loCmd.Parameters.Add(lpOp_cuenta_ord);

                // Parametro 4
                DbParameter lpOp_nom_ben = loCmd.CreateParameter();
                lpOp_nom_ben.ParameterName = "@op_nom_ben";
                lpOp_nom_ben.DbType = DbType.String;
                lpOp_nom_ben.Size = 40;
                lpOp_nom_ben.Direction = ParameterDirection.Input;
                lpOp_nom_ben.Value = texto_SPEI(lsNomBeneficiario);
                loCmd.Parameters.Add(lpOp_nom_ben);
                // Parametro 5
                DbParameter lpTc_clave_ben = loCmd.CreateParameter();
                lpTc_clave_ben.ParameterName = "@tc_clave_ben";
                lpTc_clave_ben.DbType = DbType.Int16;
                lpTc_clave_ben.Direction = ParameterDirection.Input;
                lpTc_clave_ben.Value = liTipoCuenta;
                loCmd.Parameters.Add(lpTc_clave_ben);
                // Parametro 6
                DbParameter lpOp_cuenta_ben = loCmd.CreateParameter();
                lpOp_cuenta_ben.ParameterName = "@op_cuenta_ben";
                lpOp_cuenta_ben.DbType = DbType.String;
                lpOp_cuenta_ben.Size = 20;
                lpOp_cuenta_ben.Direction = ParameterDirection.Input;
                lpOp_cuenta_ben.Value = busca_valor_xml(datos["des_variables_xml"], "ben_int_account");
                loCmd.Parameters.Add(lpOp_cuenta_ben);
                // Parametro 7
                DbParameter lpOp_rfc_curp_ben = loCmd.CreateParameter();
                lpOp_rfc_curp_ben.ParameterName = "@op_rfc_curp_ben";
                lpOp_rfc_curp_ben.DbType = DbType.String;
                lpOp_rfc_curp_ben.Size = 18;
                lpOp_rfc_curp_ben.Direction = ParameterDirection.Input;
                lpOp_rfc_curp_ben.Value = "ND";
                loCmd.Parameters.Add(lpOp_rfc_curp_ben);
            }
            // Parametro 8
            DbParameter lpOp_concepto_pag2 = loCmd.CreateParameter();
            lpOp_concepto_pag2.ParameterName = "@op_concepto_pago";
            lpOp_concepto_pag2.DbType = DbType.String;
            lpOp_concepto_pag2.Size = 210;
            lpOp_concepto_pag2.Direction = ParameterDirection.Input;
            lpOp_concepto_pag2.Value = texto_SPEI(lsConcepto);
            loCmd.Parameters.Add(lpOp_concepto_pag2);
            // Parametro 9
            DbParameter lpOp_ref_numerica = loCmd.CreateParameter();
            lpOp_ref_numerica.ParameterName = "@op_ref_numerica";
            lpOp_ref_numerica.DbType = DbType.Int32;
            lpOp_ref_numerica.Direction = ParameterDirection.Input;
            lpOp_ref_numerica.Value = liRefNumerica;
            loCmd.Parameters.Add(lpOp_ref_numerica);
            // Parametro 10
            DbParameter lpOp_ref_usu = loCmd.CreateParameter();
            lpOp_ref_usu.ParameterName = "@usu_clave_int";
            lpOp_ref_usu.DbType = DbType.Int16;
            lpOp_ref_usu.Direction = ParameterDirection.Input;
            lpOp_ref_usu.Value = 2;
            loCmd.Parameters.Add(lpOp_ref_usu);

            // Parametro 11
            string opFirmaDigital = string.Empty;
            lrsDatos = goTOMI_Database.Execute_Query("SELECT OP_FIRMA_DIG FROM TB_SRV_SWF_TRABAJO_MX WHERE NF_FOLIO = '" + icn + "'");
            if (!(lrsDatos == null))
            {
                while (lrsDatos.Read)
                {
                    if (!(lrsDatos("OP_FIRMA_DIG") is DBNull))
                    {
                        opFirmaDigital = lrsDatos("OP_FIRMA_DIG");
                    }
                }
                lrsDatos.Close();
                lrsDatos = default;
            }

            if (string.IsNullOrEmpty(opFirmaDigital))
            {
                throw new Exception("No fue posible obtener el campo de firma digital");
            }

            DbParameter lpOp_firma_dig = loCmd.CreateParameter();
            lpOp_firma_dig.ParameterName = "@op_firma_dig";
            lpOp_firma_dig.DbType = DbType.String;
            lpOp_firma_dig.Direction = ParameterDirection.Input;
            lpOp_firma_dig.Value = opFirmaDigital;
            loCmd.Parameters.Add(lpOp_firma_dig);


            // Termina Definición de parámetros y hace el llamado
            write_Log("INFO|registra_SPEI|Pasaron los parametros.");
            lrsDatos_SPEI = loCmd.ExecuteReader();
            write_Log("INFO|registra_SPEI|Se procesó procedimientos si errores.");
            if (!(lrsDatos_SPEI == null))
            {
                while (lrsDatos_SPEI.Read)
                    lsCadena_Regreso = dameTexto(lrsDatos_SPEI.Item(0)) + "|" + dameTexto(lrsDatos_SPEI.Item(1)) + "|" + dameTexto(lrsDatos_SPEI.Item(2)) + "|" + dameTexto(lrsDatos_SPEI.Item(3)) + "|" + dameTexto(lrsDatos_SPEI.Item(4));
                lrsDatos_SPEI.Close();
                lrsDatos_SPEI = default;
                write_Log("INFO|registra_SPEI|Cadena_Regreso='" + lsCadena_Regreso + "'.");
            }
            loCmd = default;
            // =================================================================================================================
            // TERMINA SP
            // =================================================================================================================
            loSPEI_Database.close();
            if (lsCadena_Regreso.StartsWith("0|") | lsCadena_Regreso.Contains("Ya existe una operación"))
            {
                agrega_valor_xml(datos["des_variables_xml"], "btmum_registro_SPEI", "PROC", default);
                return true;
            }
            else
            {
                return false;
            }
        }
    }
}
